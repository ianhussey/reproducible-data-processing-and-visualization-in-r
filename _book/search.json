[
  {
    "objectID": "chapters/fundamentals.html",
    "href": "chapters/fundamentals.html",
    "title": "3  Fundamentals",
    "section": "",
    "text": "3.1 What’s the difference between Base R, RStudio IDE, and tidyverse?\nThis is an understandable point of confusion, so let’s clarify:\nThere is a long-standing debate about whether base R (alone) or R+{tidyverse} is better. Thankfully, I can resolve this question for you immediately: R+{tidyverse} is better. All hail the One True Language, {tidyverse}.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#rstudio",
    "href": "chapters/fundamentals.html#rstudio",
    "title": "3  Fundamentals",
    "section": "",
    "text": "3.1.1 Settings\nFor reproducibility, please ensure RStudio’s settings never save the objects in your environment to disk on exist or load them again when opening RStudio. Open the Tools&gt;Global Options menu, go to General, and untick the following box and set save to ‘Never’.\n\n\n\n3.1.2 Shortcuts\nLater chapters describe chunks, pipes, etc. For the moment, know that there are shortcuts for them:\nWindows\n\nInsert Chunk: Ctrl + Alt + I\nInsert Pipe (|&gt;): shift + Ctrl + M\nMulti-line typing: Alt + Mouse click-and-highlight multiple lines, then type\nMove cursor by word instead of by character: Alt + arrows\nHighlight words: Shift + alt + arrows\nFix Indentation: Mouse click-and-highlight multiple lines + Ctrl + I\nComment out (#) multiple Lines: Mouse click-and-highlight multiple lines, then Shift + Ctrl + C\n\nMac\n\nInsert Chunk: Cmd + Alt + I\nInsert Pipe (|&gt;): shift + Cmd + M\nMulti-line typing: Alt + Mouse click-and-highlight multiple lines, then type\nMove cursor by word instead of by character: Option + arrows\nHighlight words: Shift + option + arrows\nFix Indentation: Mouse click-and-highlight multiple lines + Cmd + I\nComment out (#) multiple Lines: Mouse click-and-highlight multiple lines, then Shift + Cmd + C\n\nYou can also change or set up additional keyboard shortcuts in the “Tools&gt;Modify keyboard shortcuts” drop down menu. For example, I have modified the shortcut to switch between Source viewer vs. Visual viewer to be “Cmd + `”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#dependencies",
    "href": "chapters/fundamentals.html#dependencies",
    "title": "3  Fundamentals",
    "section": "3.4 Dependencies",
    "text": "3.4 Dependencies\nInstall libraries from CRAN with install.packages(). This only needs to be done once, not on every run of the script.\n\n\nCode\ninstall.packages(tidyverse)\n\n\nIn-development libraries are sometimes not on CRAN and can be installed directly from GitHub with devtools::install_github().\n\n\nCode\ninstall.packages(devtools)\ndevtools::install_github(\"ianhussey/tides\") # username/repository\n\n\nNecessary packages (aka dependencies) can be loaded with library(). For tidiness, these should usually all be loaded at the start of your script. Some chapters in this book load libraries only when they’re used, to clearly introduce which packages provide which functions.\n\n\nCode\nlibrary(tidyverse) # umbrella package that loads dplyr/tidyr/ggplot2 and others",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#accessing-the-help-menu",
    "href": "chapters/fundamentals.html#accessing-the-help-menu",
    "title": "3  Fundamentals",
    "section": "3.5 Accessing the help menu",
    "text": "3.5 Accessing the help menu\nFor any function in a loaded package, simply type ? before the function’s name to bring up the help menu. This helps you understand the function’s purpose, its arguments, and outputs.\n\n\nCode\n?select\n\n\nIf you scroll to the bottom of a function’s help page, you’ll find an ‘Index’ hyperlink. Clicking this brings you to a list of all the package’s functions. Once you get nerdy, this can be a very useful way to discover and learn all a package’s functions.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#namespace-collisons-a-common-source-of-errors",
    "href": "chapters/fundamentals.html#namespace-collisons-a-common-source-of-errors",
    "title": "3  Fundamentals",
    "section": "3.6 Namespace collisons: a common source of errors",
    "text": "3.6 Namespace collisons: a common source of errors\nSome common packages have identically named functions with different syntax. For example, if you load both {dplyr} and {MASS}, use of the function select() can refer to either dplyr::select() or MASS::select(), and your code might not run if the other package is loaded.\nYou can see if you have two identically named functions loaded by opening the help menu and seeing if more than one entry appears (e.g. with ?select()).\nAvoid this by loading only the packages you need. Debug errors by thinking about these common namespace collisions:\n\n\n\n\n\n\n\n\n\nFunction\ntidyverse Source\nConflicting Package(s)\nNotes\n\n\n\n\nfilter\ndplyr\nstats\nstats::filter() is for signal processing (time series)\n\n\nlag\ndplyr\nstats\nDifferent semantics: dplyr::lag() is simpler\n\n\nselect\ndplyr\nMASS\nMASS::select() is for stepwise regression\n\n\nslice\ndplyr\nIRanges / S4Vectors\nCommon in Bioconductor workflows\n\n\nrename\ndplyr\nMASS\nMASS::rename() is deprecated, but may still load\n\n\nsummarise\ndplyr\nHmisc\nHmisc::summarize() differs in behavior\n\n\nintersect\ndplyr\nbase\ndplyr re-exports base::intersect()\n\n\nunion\ndplyr\nbase\ndplyr re-exports base::union()\n\n\nsetdiff\ndplyr\nbase\ndplyr re-exports base::setdiff()\n\n\ncount\ndplyr\nplyr\nDifferent behavior/output in plyr::count()\n\n\ndesc\ndplyr\nIRanges\nConflicts with IRanges sorting\n\n\nmutate\ndplyr\nplyr\nConflicts common when plyr is loaded\n\n\narrange\ndplyr\nplyr\nSubtle differences; dplyr preferred\n\n\n\nSolve this issue either by specifying which package should be used each time you use the function (e.g., dplyr::select() instead of select()) or by specifying below your library() calls which version is preferred:\n\n\nCode\nlibrary(conflicted)\nconflict_prefer(name = \"select\", winner = \"dplyr\")\n\n\n[conflicted] Will prefer dplyr::select over any other package.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#assignment-of-objects",
    "href": "chapters/fundamentals.html#assignment-of-objects",
    "title": "3  Fundamentals",
    "section": "3.7 Assignment of objects",
    "text": "3.7 Assignment of objects\nAssignment of objects is done via &lt;- by convention.\n\n\nCode\n# set the variable x to be the number 5\nx &lt;- 5\n\n# print the contents of x\nx\n\n\n[1] 5\n\n\nTechnically you can also use =, but it’s best to avoid it.\n\n\nCode\n# set the variable y to be the string \"hello\"\ny = \"hello\"\n\n# print the contents of y\ny\n\n\n[1] \"hello\"\n\n\nIt’s somewhat less well known, but you can also do “right-assignment” (-&gt;) instead of the much more common left assignment (&lt;-).\n\n\nCode\n# set the variable y to be the string \"really? yes.\"\n\"really? yes.\" -&gt; z\n\n# print the contents of z\nz\n\n\n[1] \"really? yes.\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#rounding-round-probably-doesnt-do-what-you-think",
    "href": "chapters/fundamentals.html#rounding-round-probably-doesnt-do-what-you-think",
    "title": "3  Fundamentals",
    "section": "3.8 Rounding: round() probably doesn’t do what you think",
    "text": "3.8 Rounding: round() probably doesn’t do what you think\nDid you know that R doesn’t use the rounding method most of us are taught in school, where .5 is rounded up to the next integer? Instead it uses “banker’s rounding”, which is better when you round a very large number of numbers, but worse for reporting the results of specific analyses.\nThis is easier to show than explain. The round() function rounds each of the numbers passed to it. What do you expect the output to be?\n\n\nCode\nround(c(0.5, \n        1.5, \n        2.5, \n        3.5, \n        4.5, \n        5.5))\n\n\n\n\n\n\n\n\nClick to show result\n\n\n\n\n\n\n[1] 0 2 2 4 4 6\n\nWhy is this? Because R’s round() function uses “banker’s rounding, which rounds 5s based on whether the preceding digit is odd or even. This is a good thing in many contexts like accounting, but it’s usually not what we want or expect when rounding specific statistical results for inclusion in a report or manuscript.\n\n\n\nIn most of your R scripts, you should probably instead use janitor::round_half_up() instead, which produces the round-5-upwards behavior you were probably taught in school.\n\n\nCode\nlibrary(janitor)\n\njanitor::round_half_up(c(0.5, \n                         1.5, \n                         2.5, \n                         3.5, \n                         4.5, \n                         5.5))\n\n\n[1] 1 2 3 4 5 6\n\n\nAnother great option is roundwork::round_up(), which is a package that my PhD student Lukas Jung wrote before joining our research group.\n\n\nCode\nlibrary(roundwork) \n\nroundwork::round_up(c(0.5, \n                      1.5, \n                      2.5, \n                      3.5, \n                      4.5, \n                      5.5))\n\n\n[1] 1 2 3 4 5 6",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#exercises",
    "href": "chapters/fundamentals.html#exercises",
    "title": "3  Fundamentals",
    "section": "3.9 Exercises",
    "text": "3.9 Exercises\nEdit this .qmd file to make the following changes.\n\n3.9.1 Fix indentation / white space\nRead the code in the chunk below. We will cover the functions in later chapters, you don’t need to understand it yet. Notice that the indentation or ‘white space’ is somewhat chaotic. Fix this with a keyboard shortcut: with your mouse, highlight the code the chunk below and press Ctrl + I (Windows) or Cmd + I (Mac) to fix the indentation. Notice how much easier it is to read.\nYou can undo this with Ctrl + z (Windows) or Cmd + z (Mac) if you want to see it before/after again.\n\n\nCode\n# create table\ndat_processed_long %&gt;%\n  # summarize mean and SD by subscale\ndplyr::group_by(subscale) %&gt;%\n  dplyr::summarize(n = dplyr::n(),\nm = mean(score, na.rm = TRUE),\n               sd = sd(score, na.rm = TRUE)) %&gt;%\n  # round estimates \n  dplyr::mutate(m = janitor::round_half_up(m, digits = 2),\n  sd = janitor::round_half_up(sd, digits = 2)) %&gt;%\n# print nicer table\nknitr::kable(align = 'r') |&gt;\n  kableExtra::kable_styling()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/learning_resources.html",
    "href": "chapters/learning_resources.html",
    "title": "1  Other learning resources",
    "section": "",
    "text": "You can find cheatsheets in the /resources folder [add link]\nThe Open Source textbook Data Skills for Reproducible Research (DeBruine et al.) is very good, e.g., its sections on dplyr and tidyr.\nAllison Horst’s interactive web app to learn dplyr is great: https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome.\nThe Open Source textbook R for Data Science (aka, Wickham’s R4DS) is also very good, if a little dryer. Hadley Wickham is the main developer of the “tidyverse” set of packages, including dplyr, tidyr, ggplot2, stringr, lubridate, and others. See its section on data transformation.\n\nThe entire second edition of the book is available at https://r4ds.hadley.nz/.\n\nGarrick Aden-Buie’s tidyexplain is great for understanding how tidyr’s pivot functions work: https://github.com/gadenbuie/tidyexplain\ndatasciencebox.org has good interactive tutorials, but they are more useful for practicing processing and visualization skills once you’ve already learned the functions\n\nggplot2 https://minecr.shinyapps.io/dsbox-01-edibnb/\nggplot2, pipe, mutate https://minecr.shinyapps.io/dsbox-02-accidents\nggplot2, pipe, select, arrange, summarize, count, filter https://minecr.shinyapps.io/dsbox-03-collegemajors\ncount, arrange, summarize https://minecr.shinyapps.io/dsbox-04-legosales/\n\nIf you’d like video content, datasciencebox.org also has it: https://datasciencebox.org/02-exploring-data",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Other learning resources</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html",
    "href": "chapters/reproducible_reports.html",
    "title": "4  Reproducible reports",
    "section": "",
    "text": "4.1 Literate programming\nLiterate programming is the idea that code and text should be written in the same document to produce a narrative with reproducible results. It is therefore very suited to writing scientific reports and manuscripts.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#literate-programming",
    "href": "chapters/reproducible_reports.html#literate-programming",
    "title": "4  Reproducible reports",
    "section": "",
    "text": "4.1.1 In line code\nCode can be written in ‘in line’ in the text as follows: 2. In the RMarkdown document, you have hover over the in line code and press enter or return to run the code.\n\n\n4.1.2 Code chunks\nFor any code that isn’t extremely short, you should write it in code chunks.\nThese are written as follows: three backticks followed by “{r}” specifies that it is a chunk of R code, then the code, then three more backticks to end the chunk. Note that backticks are not apostrophes! (` vs ’).\nYou can also insert a code chunk with Ctrl + Alt + I (Windows) or Cmd + Alt + I (Mac).\nOutput appears below chunks. You can run all code in a chunk by clicking the right-arrow button to the right of the chunk: \nYou can also run all previous chunks in a document not including the current chunk by clicking the downward arrow button to the right of the chunk: \nFor example:\n\n\nCode\n2+2\n\n\n[1] 4",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#rendering-and-reproducibilty",
    "href": "chapters/reproducible_reports.html#rendering-and-reproducibilty",
    "title": "4  Reproducible reports",
    "section": "4.2 Rendering and reproducibilty",
    "text": "4.2 Rendering and reproducibilty\nQuarto (.qmd) and RMarkdown (.Rmd) files can produce .html files that can be viewed in any web browser. This has two key functions:\n\nIt allows you to make more attractive outputs with tables, plots, and results.\nIt can greatly increase reproducibility. Each time you ‘render’ a .html file from a .qmd/.Rmd, the code is run in a new R session in the background. The .html file is only created if all the code runs. This is extremely useful for ensuring that your code does indeed run, that you have all necessary packages loaded, etc. Note however that it does not ensure that your code is error free, that there are not unnecessary packages loaded, etc.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#markdown-formatting-and-levels-of-heading",
    "href": "chapters/reproducible_reports.html#markdown-formatting-and-levels-of-heading",
    "title": "4  Reproducible reports",
    "section": "4.3 Markdown formatting and levels of heading",
    "text": "4.3 Markdown formatting and levels of heading\nQuarto (.qmd) and RMarkdown files (.Rmd) allow you to use markdown formatting. This is a very simple way to do basic formatting, such as headings, emphasis, bullet points and lists.\nMarkdown formatting can be used as follows.\nDon’t forget the space after the #, or spaces between lines to separate sections of different types!\n# Level 1 heading\n\n## Level 2 heading\n\n### Level 3 heading\n\nNormal text.\n\n*italic text*\n\n**bold text**\n\n- bullet points\n- bullet points\n\n1. numbered list\n2. numbered list\n\nDisplay an image in visual editor/on rendering:\n![](../images/r_meme.png)\nEach of the above are rendered as follows in the .html file once rendered:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#level-1-heading",
    "href": "chapters/reproducible_reports.html#level-1-heading",
    "title": "4  Reproducible reports",
    "section": "4.4 Level 1 heading",
    "text": "4.4 Level 1 heading\n\n4.4.1 Level 2 heading\n\n4.4.1.1 Level 3 heading\nNormal text.\nitalic text\nbold text\n\nbullet points\nbullet points\n\n\nnumbered list\nnumbered list\n\nDisplay an image in visual editor/on rendering:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#table-of-contents-and-outline",
    "href": "chapters/reproducible_reports.html#table-of-contents-and-outline",
    "title": "4  Reproducible reports",
    "section": "4.5 Table of contents and outline",
    "text": "4.5 Table of contents and outline\nLevels of heading are extremely useful for structuring your report.\n\nThey automatically appear as headings in the “Outline” section in RStudio, therefore allowing you to navigate your document easily. When you have a .qmd or .Rmd file open in RStudio, click the ‘Outline’ button to the top-right of the source file window, where this text appears, to see all the headings in your file. Click any of them to go to that heading in the document.\nWhen the file is rendered (.qmd) or knited (.Rmd) to a .html file, the levels of heading will appear as clickable links in the table of contents (assuming that your YAML header at the top of your file has toc: true, as this file does).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#math-typesetting-via-latex",
    "href": "chapters/reproducible_reports.html#math-typesetting-via-latex",
    "title": "4  Reproducible reports",
    "section": "4.6 Math typesetting via LaTeX",
    "text": "4.6 Math typesetting via LaTeX\nYou can include math in line with LaTeX code placed between dollar signs: e.g., “$\\eta_{p}^{2}$ = 0.03” produces “\\(\\eta_{p}^{2}\\) = 0.03”.\nYou can also write longer chunks of LaTeX, for example to specify that the mean (\\(\\bar{x}\\)) is the sum of all elements of the vector \\(x\\) divided by number of elements in the vector (\\(n\\)).\nThis code:\n$$\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^n x_i.\n$$\nProduces this math:\n\\[\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^n x_i.\n\\]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#source-versus-visual-editor",
    "href": "chapters/reproducible_reports.html#source-versus-visual-editor",
    "title": "4  Reproducible reports",
    "section": "4.7 Source versus Visual editor",
    "text": "4.7 Source versus Visual editor\nYou can view a .qmd file’s raw code in the ‘Source’ viewer. The button for this appears on the top left above the code in RStudio.\nScreenshot of Source editor mode:\n\nYou can also view the a live preview of the rendered file, including tables, plots, math, etc., using ‘Visual’ editor mode, although there will some simplifications compared to when you render a .html file.\nScreenshot of Visual editor mode:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#reading-processing-and-writing-data",
    "href": "chapters/reproducible_reports.html#reading-processing-and-writing-data",
    "title": "4  Reproducible reports",
    "section": "4.8 Reading, processing, and writing data",
    "text": "4.8 Reading, processing, and writing data\nRaw data can be read in from .csv, .xlsx, SPSS .sav, and many other types of files. Raw data can be processed and tidied into analyzable data and saved to disk.\nWe will cover these functions in later chapters. For the moment, the point to appreciate is that clear, reproducible workflows are easy to write in R+tidyverse.\nRead the comments and code below to see if you can understand the general flow of what is being done, even without knowing these functions yet.\n\n\nCode\n# dependencies\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\n\n# load raw data\ndat_raw &lt;- readr::read_csv(\"../data/raw/data_raw_bfi.csv\")\n\n# process data\ndat_processed &lt;- dat_raw %&gt;%\n  # rename variable to make it clearer\n  dplyr::rename(race_iat = IAT_score) %&gt;%\n  # exclude participants with missing data or who did not meet performance criteria\n  dplyr::filter(complete_individual_differences_data == TRUE & exclude_iat == FALSE) %&gt;%\n  # calculate sum scores for the BFI personality subscales\n  dplyr::rowwise() %&gt;%\n  dplyr::mutate(openness = mean(c_across(starts_with(\"bfi_o\"))),\n                conscientiousness = mean(c_across(starts_with(\"bfi_c\"))),\n                extroversion = mean(c_across(starts_with(\"bfi_e\"))),\n                agreeableness = mean(c_across(starts_with(\"bfi_a\"))),\n                neuroticism = mean(c_across(starts_with(\"bfi_n\")))) %&gt;%\n  dplyr::ungroup() %&gt;%\n  # retain only the columns needed\n  dplyr::select(race_iat, openness, conscientiousness, extroversion, agreeableness, neuroticism)\n\n# create a directory to save processed data to \ndir.create(\"../data/processed\")\n\n# save data\nreadr::write_csv(dat_processed, \"../data/processed/data_processed_bfi_race_iat.csv\")\n\n# reshape to long format for tables and plots\ndat_processed_long &lt;- dat_processed %&gt;%\n  tidyr::pivot_longer(cols = c(openness, conscientiousness, extroversion, agreeableness, neuroticism),\n                      names_to = \"subscale\",\n                      values_to = \"score\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#tables",
    "href": "chapters/reproducible_reports.html#tables",
    "title": "4  Reproducible reports",
    "section": "4.9 Tables",
    "text": "4.9 Tables\nSummary statistics such as sample sizes, means and Standard Deviations can be calculated, rounded, and presented in tables.\nAgain, we will cover these functions in later chapters. For the moment, simply notice that this is quite simple to do. As before, tead the comments and code below to see if you can understand the general flow of what is being done, even without knowing these functions yet.\n\n\nCode\n# dependencies\nlibrary(janitor)\nlibrary(knitr)\nlibrary(kableExtra)\n\n# table\ndat_processed_long %&gt;%\n  # summarize mean and SD by subscale\n  dplyr::group_by(subscale) %&gt;%\n  dplyr::summarize(n = dplyr::n(),\n                   m = mean(score, na.rm = TRUE),\n                   sd = sd(score, na.rm = TRUE)) %&gt;%\n  # round estimates \n  dplyr::mutate(m = janitor::round_half_up(m, digits = 2),\n                sd = janitor::round_half_up(sd, digits = 2)) %&gt;%\n  # print nicer table\n  knitr::kable(align = 'r') |&gt;\n  kableExtra::kable_styling()\n\n\n\n\n\nsubscale\nn\nm\nsd\n\n\n\n\nagreeableness\n167\n4.00\n0.38\n\n\nconscientiousness\n167\n4.24\n0.48\n\n\nextroversion\n167\n4.18\n0.49\n\n\nneuroticism\n167\n3.91\n0.50\n\n\nopenness\n167\n4.37\n0.48",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#plots",
    "href": "chapters/reproducible_reports.html#plots",
    "title": "4  Reproducible reports",
    "section": "4.10 Plots",
    "text": "4.10 Plots\nPlots can be made in {ggplot2}, e.g., scatter plots of the association between personality subscales and implicit racial bias.\nAs before, read the comments and code below to see if you can understand the general flow of what is being done, even without knowing these functions yet.\n\n\nCode\n# dependencies\nlibrary(ggplot2)\n\n# plot\nggplot(dat_processed_long, aes(score, race_iat)) +\n  geom_point(alpha = 0.7) +\n  facet_wrap(~ subscale) +\n  theme_linedraw() +\n  ylab(\"Implicit racial bias\") +\n  xlab(\"Personality subscale score\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#analyses",
    "href": "chapters/reproducible_reports.html#analyses",
    "title": "4  Reproducible reports",
    "section": "4.11 Analyses",
    "text": "4.11 Analyses\nAnalyses can be run, and even their results extracted an interpreted, with the help of R packages such as {report} and {parameters} from the easystats cluster of packages.\n\n\nCode\n# dependencies\nlibrary(report)\n\n# fit correlation test\nres &lt;- cor.test(formula = ~ race_iat + extroversion, \n                data = dat_processed, \n                use = \"pairwise.complete.obs\")\n\n# create standard report of results\nreport::report_text(res)\n\n\nEffect sizes were labelled following Funder's (2019) recommendations.\n\nThe Pearson's product-moment correlation between race_iat and extroversion is\nnegative, statistically not significant, and small (r = -0.18, 95% CI [-0.39,\n0.05], t(73) = -1.52, p = 0.132)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/reproducible_reports.html#exercises",
    "href": "chapters/reproducible_reports.html#exercises",
    "title": "4  Reproducible reports",
    "section": "4.12 Exercises",
    "text": "4.12 Exercises\nEdit this .qmd file to make the following changes.\n\n4.12.1 Add authorship\nAdd the following text to the YAML header on line 3, just under ‘title’: author: \"yourname\", and replace ‘yourname’ with your name. Click ‘render’ to create a reproducible report as a .html from this .qmd file. It will now list you as the author.\n\n\n4.12.2 Add date\nAdd the following text to the YAML header on line 4: date: today. Now when you render again, it will list today’s date so that you know when the report was created.\n\n\n4.12.3 Make the plot more colorful\nChange the ‘aesthetics’ call from aes(score, race_iat) to aes(score, race_iat, color = subscale). Run all previous chunks to reload and reprocess the data using this button:  Then, run the plot chunk again using this one to view your more colorful plot:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html",
    "href": "chapters/loading_data.html",
    "title": "4  Loading, viewing, and saving data",
    "section": "",
    "text": "4.1 Loading .csv files",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#loading-.csv-files",
    "href": "chapters/loading_data.html#loading-.csv-files",
    "title": "4  Loading, viewing, and saving data",
    "section": "",
    "text": "4.1.1 Relative vs. absolute paths: Avoid using setwd()!\nWhen we write .R scripts, we often use setwd() to define where files should be loaded from and saved to. The problem with setwd() is that it hard-codes file paths that are usually specific to the computer and user. For example, if I write an .R script that includes setwd(\"C:/Users/IanHussey/Documents/R_course/\"), before loading some data using read.csv(). If I email you this script and data file, it script won’t work on your machine unless your folders are identically named; you have to change the file path in setwd(). This lowers the reproducibility of the code, as it can’t be run trivially by other people on other computers.\nThis is because setwd() uses ‘absolute’ paths that point to a specific location in a directory structure. One of the very useful features of RMarkdown (.Rmd) and Quarto (.qmd) files is that they instead use ‘relative’ paths, which specify where a file or directory is in relation to the .Rmd or .qmd script. That is, the working directory is by definition wherever the .Rmd or .qmd file is, without being specified.\nIf I have a directory - located anywhere on my hard drive - called ‘R_course’ that contains the folders ‘code’ and ‘data’, and the ‘data’ directory itself contains the directories ‘processed’ and ‘raw’. Imagine the files within these directories are as follows:\nR_course/\n├── code/\n│   ├── analysis.qmd\n│   ├── data_shouldnt_usually_go_here.csv\n│   └── analysis.qmd\n└── data/\n    ├── processed/\n    │   └── data_processed.csv\n    └── raw/\n        ├── data_demographics_raw.csv\n        ├── data_selfreports_raw.csv\n        ├── code_shouldnt_usually_go_here.qmd\n        └── data_behavioraltask_raw.csv\nBecause .qmd files use ‘relative’ paths, to load the ‘data_shouldnt_usually_go_here.csv’ file I only need to do the following, without any setwd() call:\n\n\nCode\ndat &lt;- read.csv(\"data_shouldnt_usually_go_here.csv\")\n\n\nOf course, code and data should be clearly separated within a project so ‘data_shouldnt_usually_go_here.csv’ should not usually go in that directory, as the name suggests.\nIf I instead wanted to load ‘data_processed.csv’, I would do this as follows. This data file actually exists in this project, so the code will run assuming you have the data files in the correct location relative to this .qmd script.\n\n\nCode\ndat_processed &lt;- read.csv(\"../data/processed/data_processed.csv\")\n\n\nThis is parsed as follows: ../ tells RStudio to go ‘up’ one directory level from ‘analysis.qmd’ to the ‘R_course’ folder that contains it. data/ then tells it to go ‘down’ one level into the ‘data’ folder inside ‘R_course’. Likewise, processed/ then tells it to go ‘down’ another level into the ‘processed’ folder, before loading the ‘data_processed.csv’ file.\nNote that ../ can be stacked to go ‘up’ multiple directory levels, e.g., ../../.\nAs long as you send move the entire ‘R_course’ folder and preserve the relative location between the code and the data, the .qmd file’s read.csv() call will still work. It doesn’t matter whether you the ‘R_course’ directory to somewhere else on your hard drive, or create a .zip file and email it to someone else, or distribute it via GitHub, or whether they’re using Windows or Mac.\nAlso note that because the directory ‘R_course’ is never specified in the read.csv() call, it can be called anything else and still work. The same goes for the name of the script which calls read.csv() - in this case, the script you’re reading is called ‘loading_data.qmd’ and the code still works.\nFYI, you can also use relative paths in regular .R files using the {here} library (see https://here.r-lib.org/).\n\n\n4.1.2 Check your learning\nQuestion: Using the above file structure diagram, what R code is needed to load the ‘data_shouldnt_usually_go_here.csv’ file from the ‘code_shouldnt_usually_go_here.qmd’?\n\n\n\n\n\n\nClick to show answer\n\n\n\n\n\n\n\nCode\ndat &lt;- read.csv(\"../../code/data_shouldnt_usually_go_here.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#viewing-data-frames",
    "href": "chapters/loading_data.html#viewing-data-frames",
    "title": "4  Loading, viewing, and saving data",
    "section": "4.2 Viewing data frames",
    "text": "4.2 Viewing data frames\n\n4.2.1 In your environment\nData frames (and other objects) that have already been loaded into your R environment will appear under the ‘files’ tab in RStudio.\nYou can view them by clicking on them in the files tab, or in the Source window (where code appears) with Cmd+click (on Mac) or Ctrl+click (on Windows).\n\n\n4.2.2 Printing data frames below chunks\nTo print a data frame below the code chunk, you can;\nRun the object name:\n\n\nCode\ndat_processed\n\n\n    unique_id age    gender mean_self_report n_items  amp_score\n1   548957868  23      &lt;NA&gt;               NA      NA         NA\n2   504546409  NA      &lt;NA&gt;               NA      NA 0.37500000\n3   994692692  21    female         1.333333       3 0.80555556\n4   902223169  19    female         2.666667       3 0.56944444\n5   469672453  27      male         1.333333       3 0.25000000\n6   637089700  43      male         2.000000       3 0.50000000\n7     4345805  54      male         3.000000       3 0.36111111\n8   786441188  27    female         1.666667       3 0.76388889\n9   510787584  34    female         4.000000       3 0.51388889\n10  684265529  19 nonbinary         1.000000       3 0.54166667\n11   47022865  21      male         1.000000       3 0.47222222\n12  199802590  27      male         5.666667       3 0.52777778\n13  295696078  32      male         1.000000       3 0.54166667\n14   32034696  38      male         1.333333       3 0.62500000\n15  609227927  18      male               NA      NA 0.98611111\n16   59367911  47    female         1.000000       3 0.48611111\n17  386661197  46      male         2.333333       3 0.44444444\n18  238678139  38    female         1.000000       3 0.65277778\n19  764499289  52      male         1.666667       3 0.55555556\n20  586346915  36    female         1.000000       3 0.54166667\n21  100125154  29      male         2.333333       3 0.51388889\n22  550721671  28    female         1.000000       3 0.52777778\n23  161234436  25      male         6.666667       3 0.56944444\n24  621686155  42    female         1.000000       3 0.51388889\n25  238079276  28    female         1.666667       3 0.54166667\n26  561842983  23    female         1.000000       3 0.94444444\n27  627537443  27    female         1.000000       3 0.68055556\n28  591041139  29 nonbinary         3.666667       3 0.61111111\n29  601833546  34      male         3.000000       3 0.50000000\n30  874662429  36      male         3.000000       3 0.52777778\n31  658421880  53    female         1.000000       3 0.51388889\n32  557207580  28    female         1.000000       3 0.55555556\n33   13708908  25      male         1.000000       3 0.55555556\n34  699441423  48      male         1.000000       3 0.98611111\n35  841303698  19    female         1.000000       3 0.58333333\n36  881713870  25 nonbinary         5.333333       3 0.48611111\n37  663795436  39    female         1.000000       3 0.52777778\n38  422087765  45    female         1.000000       3 0.48611111\n39  343944905  31      male         4.666667       3 0.52777778\n40  920212493  61      male         1.333333       3 0.86111111\n41  526570034  63      male         1.000000       3 0.61111111\n42  882246022  61      male         1.000000       3 0.52777778\n43  904883244  59      male         1.000000       3 0.61111111\n44  293831276  60    female         1.000000       3 0.06944444\n45  530863876  42      male         2.666667       3 0.43055556\n46  753565148  26    female         1.000000       3 0.55555556\n47  727031797  27      male         1.000000       3 0.73611111\n48  751712225  22    female         1.000000       3 0.50000000\n49  464934738  21      male         2.000000       3 0.48611111\n50  563522777  53      male         2.666667       3 0.50000000\n51  373740279  51    female         1.000000       3 0.62500000\n52  589607780  35    female         1.000000       3 0.48611111\n53  681045009  26      male         3.000000       3 0.95833333\n54  855399085  32    female         1.000000       3 0.00000000\n55  821599197  45    female         1.000000       3 0.36111111\n56  311497290  48      male         3.000000       3 0.29166667\n57  254118946  64    female         2.666667       3 0.45833333\n58  317124448  36    female         1.000000       3 0.87500000\n59  730068356  51    female         1.000000       3 0.94444444\n60  236383059  37      male         1.000000       3 0.48611111\n61  246374429  21    female         1.000000       3 0.50000000\n62  952386283  26    female         2.333333       3 0.52777778\n63  694264273  31      male         2.333333       3 0.59722222\n64  175188025  42      male         1.000000       3 0.81944444\n65  339232704  31      male         2.000000       3 0.77777778\n66  386456897  23      male         1.333333       3 0.47222222\n67  637668138  30      male         2.000000       3 0.50000000\n68  237498336  49      male         1.000000       3 0.58333333\n69  631750145  24    female         1.000000       3 0.51388889\n70  867476338  29    female         1.000000       3 0.47222222\n71  196574198  21    female         1.000000       3 0.88888889\n72  692009266  31      male         1.000000       3 0.54166667\n73  477618299  53      male         1.000000       3 0.63888889\n74  325830955  50      male         4.333333       3 0.56944444\n75  965314508  28      male         1.000000       3 0.50000000\n76   72442795  19    female         1.666667       3 0.94444444\n77  216287717  50    female         3.333333       3 0.52777778\n78  287027128  37    female         1.000000       3 0.50000000\n79  247697997  20      male         2.000000       3 0.62500000\n80  954130481  50    female         1.000000       3 0.51388889\n81  564734227  30      male         1.666667       3 0.37500000\n82  797453632  21      male         1.000000       3 0.58333333\n83   85445170  26      male         1.000000       3 0.45833333\n84  614285355  59      male         1.000000       3 0.56944444\n85   14943693  39      male         1.333333       3 0.97222222\n86  920896673  35      male         1.000000       3 0.47222222\n87   75092407  22    female         1.000000       3 0.40277778\n88   83185292  39      male         3.333333       3 0.43055556\n89  234276163  55    female         1.000000       3 0.84722222\n90  940229231  45      male         3.000000       3 0.68055556\n91  456445084  48      male         1.000000       3 0.51388889\n92  102678881  32      male         1.000000       3 0.98611111\n93  187172011  51    female         1.000000       3 0.98611111\n94  108266335  32    female         1.000000       3 0.61111111\n95  752580117  35      male         1.000000       3 0.13888889\n96  506524197  36      male         2.000000       3 0.55555556\n97  524337317  29      male         1.666667       3 0.55555556\n98  759418836  32      male         1.000000       3 0.97222222\n99  233735378  NA      &lt;NA&gt;         1.666667       3 0.50000000\n100 246532124  NA      &lt;NA&gt;         4.000000       1 0.54861111\n101 494447594  NA      &lt;NA&gt;         1.000000       3 0.87500000\n102 893377996  NA      &lt;NA&gt;               NA       1         NA\n    proportion_too_fast_trials n_trials exclude_amp\n1                           NA       NA        &lt;NA&gt;\n2                  0.000000000        8     include\n3                  0.000000000       72     include\n4                  0.000000000       72     include\n5                  0.000000000       72     include\n6                  0.000000000       72     include\n7                  0.041666667       72     include\n8                  0.000000000       72     include\n9                  0.013888889       72     include\n10                 0.000000000       72     include\n11                 0.000000000       72     include\n12                 0.000000000       72     include\n13                 0.000000000       72     include\n14                 0.000000000       72     include\n15                 0.055555556       72     include\n16                 0.000000000       72     include\n17                 0.000000000       72     include\n18                 0.000000000       72     include\n19                 0.000000000       72     include\n20                 0.000000000       72     include\n21                 0.000000000       72     include\n22                 0.000000000       72     include\n23                 0.111111111       72     exclude\n24                 0.000000000       72     include\n25                 0.000000000       72     include\n26                 0.000000000       72     include\n27                 0.000000000       72     include\n28                 0.000000000       72     include\n29                 0.000000000       72     include\n30                 0.000000000       72     include\n31                 0.000000000       72     include\n32                 0.000000000       72     include\n33                 0.000000000       72     include\n34                 0.000000000       72     include\n35                 0.000000000       72     include\n36                 0.000000000       72     include\n37                 0.000000000       72     include\n38                 0.000000000       72     include\n39                 0.319444444       72     exclude\n40                 0.000000000       72     include\n41                 0.000000000       72     include\n42                 0.000000000       72     include\n43                 0.000000000       72     include\n44                 0.000000000       72     include\n45                 0.000000000       72     include\n46                 0.000000000       72     include\n47                 0.055555556       72     include\n48                 0.000000000       72     include\n49                 0.083333333       72     include\n50                 0.083333333       72     include\n51                 0.000000000       72     include\n52                 0.000000000       72     include\n53                 0.041666667       72     include\n54                 0.000000000       72     include\n55                 0.000000000       72     include\n56                 0.000000000       72     include\n57                 0.000000000       72     include\n58                 0.000000000       72     include\n59                 0.000000000       72     include\n60                 0.000000000       72     include\n61                 0.000000000       72     include\n62                 0.000000000       72     include\n63                 0.000000000       72     include\n64                 0.000000000       72     include\n65                 0.000000000       72     include\n66                 0.000000000       72     include\n67                 0.013888889       72     include\n68                 0.000000000       72     include\n69                 0.125000000       72     exclude\n70                 0.000000000       72     include\n71                 0.000000000       72     include\n72                 0.000000000       72     include\n73                 0.000000000       72     include\n74                 0.027777778       72     include\n75                 0.000000000       72     include\n76                 0.000000000       72     include\n77                 0.000000000       72     include\n78                 0.000000000       72     include\n79                 0.000000000       72     include\n80                 0.000000000       72     include\n81                 0.152777778       72     exclude\n82                 0.013888889       72     include\n83                 0.180555556       72     exclude\n84                 0.000000000       72     include\n85                 0.000000000       72     include\n86                 0.055555556       72     include\n87                 0.027777778       72     include\n88                 0.000000000       72     include\n89                 0.000000000       72     include\n90                 0.000000000       72     include\n91                 0.000000000       72     include\n92                 0.000000000       72     include\n93                 0.000000000       72     include\n94                 0.000000000       72     include\n95                 0.000000000       72     include\n96                 0.000000000       72     include\n97                 0.000000000       72     include\n98                 0.013888889       72     include\n99                 0.000000000       72     include\n100                0.006944444      144     include\n101                0.000000000       72     include\n102                         NA       NA        &lt;NA&gt;\n\n\nUse print():\n\n\nCode\nprint(dat_processed)\n\n\n    unique_id age    gender mean_self_report n_items  amp_score\n1   548957868  23      &lt;NA&gt;               NA      NA         NA\n2   504546409  NA      &lt;NA&gt;               NA      NA 0.37500000\n3   994692692  21    female         1.333333       3 0.80555556\n4   902223169  19    female         2.666667       3 0.56944444\n5   469672453  27      male         1.333333       3 0.25000000\n6   637089700  43      male         2.000000       3 0.50000000\n7     4345805  54      male         3.000000       3 0.36111111\n8   786441188  27    female         1.666667       3 0.76388889\n9   510787584  34    female         4.000000       3 0.51388889\n10  684265529  19 nonbinary         1.000000       3 0.54166667\n11   47022865  21      male         1.000000       3 0.47222222\n12  199802590  27      male         5.666667       3 0.52777778\n13  295696078  32      male         1.000000       3 0.54166667\n14   32034696  38      male         1.333333       3 0.62500000\n15  609227927  18      male               NA      NA 0.98611111\n16   59367911  47    female         1.000000       3 0.48611111\n17  386661197  46      male         2.333333       3 0.44444444\n18  238678139  38    female         1.000000       3 0.65277778\n19  764499289  52      male         1.666667       3 0.55555556\n20  586346915  36    female         1.000000       3 0.54166667\n21  100125154  29      male         2.333333       3 0.51388889\n22  550721671  28    female         1.000000       3 0.52777778\n23  161234436  25      male         6.666667       3 0.56944444\n24  621686155  42    female         1.000000       3 0.51388889\n25  238079276  28    female         1.666667       3 0.54166667\n26  561842983  23    female         1.000000       3 0.94444444\n27  627537443  27    female         1.000000       3 0.68055556\n28  591041139  29 nonbinary         3.666667       3 0.61111111\n29  601833546  34      male         3.000000       3 0.50000000\n30  874662429  36      male         3.000000       3 0.52777778\n31  658421880  53    female         1.000000       3 0.51388889\n32  557207580  28    female         1.000000       3 0.55555556\n33   13708908  25      male         1.000000       3 0.55555556\n34  699441423  48      male         1.000000       3 0.98611111\n35  841303698  19    female         1.000000       3 0.58333333\n36  881713870  25 nonbinary         5.333333       3 0.48611111\n37  663795436  39    female         1.000000       3 0.52777778\n38  422087765  45    female         1.000000       3 0.48611111\n39  343944905  31      male         4.666667       3 0.52777778\n40  920212493  61      male         1.333333       3 0.86111111\n41  526570034  63      male         1.000000       3 0.61111111\n42  882246022  61      male         1.000000       3 0.52777778\n43  904883244  59      male         1.000000       3 0.61111111\n44  293831276  60    female         1.000000       3 0.06944444\n45  530863876  42      male         2.666667       3 0.43055556\n46  753565148  26    female         1.000000       3 0.55555556\n47  727031797  27      male         1.000000       3 0.73611111\n48  751712225  22    female         1.000000       3 0.50000000\n49  464934738  21      male         2.000000       3 0.48611111\n50  563522777  53      male         2.666667       3 0.50000000\n51  373740279  51    female         1.000000       3 0.62500000\n52  589607780  35    female         1.000000       3 0.48611111\n53  681045009  26      male         3.000000       3 0.95833333\n54  855399085  32    female         1.000000       3 0.00000000\n55  821599197  45    female         1.000000       3 0.36111111\n56  311497290  48      male         3.000000       3 0.29166667\n57  254118946  64    female         2.666667       3 0.45833333\n58  317124448  36    female         1.000000       3 0.87500000\n59  730068356  51    female         1.000000       3 0.94444444\n60  236383059  37      male         1.000000       3 0.48611111\n61  246374429  21    female         1.000000       3 0.50000000\n62  952386283  26    female         2.333333       3 0.52777778\n63  694264273  31      male         2.333333       3 0.59722222\n64  175188025  42      male         1.000000       3 0.81944444\n65  339232704  31      male         2.000000       3 0.77777778\n66  386456897  23      male         1.333333       3 0.47222222\n67  637668138  30      male         2.000000       3 0.50000000\n68  237498336  49      male         1.000000       3 0.58333333\n69  631750145  24    female         1.000000       3 0.51388889\n70  867476338  29    female         1.000000       3 0.47222222\n71  196574198  21    female         1.000000       3 0.88888889\n72  692009266  31      male         1.000000       3 0.54166667\n73  477618299  53      male         1.000000       3 0.63888889\n74  325830955  50      male         4.333333       3 0.56944444\n75  965314508  28      male         1.000000       3 0.50000000\n76   72442795  19    female         1.666667       3 0.94444444\n77  216287717  50    female         3.333333       3 0.52777778\n78  287027128  37    female         1.000000       3 0.50000000\n79  247697997  20      male         2.000000       3 0.62500000\n80  954130481  50    female         1.000000       3 0.51388889\n81  564734227  30      male         1.666667       3 0.37500000\n82  797453632  21      male         1.000000       3 0.58333333\n83   85445170  26      male         1.000000       3 0.45833333\n84  614285355  59      male         1.000000       3 0.56944444\n85   14943693  39      male         1.333333       3 0.97222222\n86  920896673  35      male         1.000000       3 0.47222222\n87   75092407  22    female         1.000000       3 0.40277778\n88   83185292  39      male         3.333333       3 0.43055556\n89  234276163  55    female         1.000000       3 0.84722222\n90  940229231  45      male         3.000000       3 0.68055556\n91  456445084  48      male         1.000000       3 0.51388889\n92  102678881  32      male         1.000000       3 0.98611111\n93  187172011  51    female         1.000000       3 0.98611111\n94  108266335  32    female         1.000000       3 0.61111111\n95  752580117  35      male         1.000000       3 0.13888889\n96  506524197  36      male         2.000000       3 0.55555556\n97  524337317  29      male         1.666667       3 0.55555556\n98  759418836  32      male         1.000000       3 0.97222222\n99  233735378  NA      &lt;NA&gt;         1.666667       3 0.50000000\n100 246532124  NA      &lt;NA&gt;         4.000000       1 0.54861111\n101 494447594  NA      &lt;NA&gt;         1.000000       3 0.87500000\n102 893377996  NA      &lt;NA&gt;               NA       1         NA\n    proportion_too_fast_trials n_trials exclude_amp\n1                           NA       NA        &lt;NA&gt;\n2                  0.000000000        8     include\n3                  0.000000000       72     include\n4                  0.000000000       72     include\n5                  0.000000000       72     include\n6                  0.000000000       72     include\n7                  0.041666667       72     include\n8                  0.000000000       72     include\n9                  0.013888889       72     include\n10                 0.000000000       72     include\n11                 0.000000000       72     include\n12                 0.000000000       72     include\n13                 0.000000000       72     include\n14                 0.000000000       72     include\n15                 0.055555556       72     include\n16                 0.000000000       72     include\n17                 0.000000000       72     include\n18                 0.000000000       72     include\n19                 0.000000000       72     include\n20                 0.000000000       72     include\n21                 0.000000000       72     include\n22                 0.000000000       72     include\n23                 0.111111111       72     exclude\n24                 0.000000000       72     include\n25                 0.000000000       72     include\n26                 0.000000000       72     include\n27                 0.000000000       72     include\n28                 0.000000000       72     include\n29                 0.000000000       72     include\n30                 0.000000000       72     include\n31                 0.000000000       72     include\n32                 0.000000000       72     include\n33                 0.000000000       72     include\n34                 0.000000000       72     include\n35                 0.000000000       72     include\n36                 0.000000000       72     include\n37                 0.000000000       72     include\n38                 0.000000000       72     include\n39                 0.319444444       72     exclude\n40                 0.000000000       72     include\n41                 0.000000000       72     include\n42                 0.000000000       72     include\n43                 0.000000000       72     include\n44                 0.000000000       72     include\n45                 0.000000000       72     include\n46                 0.000000000       72     include\n47                 0.055555556       72     include\n48                 0.000000000       72     include\n49                 0.083333333       72     include\n50                 0.083333333       72     include\n51                 0.000000000       72     include\n52                 0.000000000       72     include\n53                 0.041666667       72     include\n54                 0.000000000       72     include\n55                 0.000000000       72     include\n56                 0.000000000       72     include\n57                 0.000000000       72     include\n58                 0.000000000       72     include\n59                 0.000000000       72     include\n60                 0.000000000       72     include\n61                 0.000000000       72     include\n62                 0.000000000       72     include\n63                 0.000000000       72     include\n64                 0.000000000       72     include\n65                 0.000000000       72     include\n66                 0.000000000       72     include\n67                 0.013888889       72     include\n68                 0.000000000       72     include\n69                 0.125000000       72     exclude\n70                 0.000000000       72     include\n71                 0.000000000       72     include\n72                 0.000000000       72     include\n73                 0.000000000       72     include\n74                 0.027777778       72     include\n75                 0.000000000       72     include\n76                 0.000000000       72     include\n77                 0.000000000       72     include\n78                 0.000000000       72     include\n79                 0.000000000       72     include\n80                 0.000000000       72     include\n81                 0.152777778       72     exclude\n82                 0.013888889       72     include\n83                 0.180555556       72     exclude\n84                 0.000000000       72     include\n85                 0.000000000       72     include\n86                 0.055555556       72     include\n87                 0.027777778       72     include\n88                 0.000000000       72     include\n89                 0.000000000       72     include\n90                 0.000000000       72     include\n91                 0.000000000       72     include\n92                 0.000000000       72     include\n93                 0.000000000       72     include\n94                 0.000000000       72     include\n95                 0.000000000       72     include\n96                 0.000000000       72     include\n97                 0.000000000       72     include\n98                 0.013888889       72     include\n99                 0.000000000       72     include\n100                0.006944444      144     include\n101                0.000000000       72     include\n102                         NA       NA        &lt;NA&gt;\n\n\n\n\n4.2.3 Printing data frames more nicely\nPrinting data frames by calling their name or using print() don’t produce very attractive tables. You can improve this using a combination of the {knitr} and {kableExtra} packages.\nNote that this code uses the ‘pipe’, which we cover in more detail in the next chapter.\n\n\nCode\nlibrary(knitr)\nlibrary(kableExtra)\n\ndat_processed %&gt;%\n  knitr::kable(align = \"r\") %&gt;%\n  kableExtra::kable_styling(full_width = FALSE)\n\n\n\n\n\nunique_id\nage\ngender\nmean_self_report\nn_items\namp_score\nproportion_too_fast_trials\nn_trials\nexclude_amp\n\n\n\n\n548957868\n23\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n504546409\nNA\nNA\nNA\nNA\n0.3750000\n0.0000000\n8\ninclude\n\n\n994692692\n21\nfemale\n1.333333\n3\n0.8055556\n0.0000000\n72\ninclude\n\n\n902223169\n19\nfemale\n2.666667\n3\n0.5694444\n0.0000000\n72\ninclude\n\n\n469672453\n27\nmale\n1.333333\n3\n0.2500000\n0.0000000\n72\ninclude\n\n\n637089700\n43\nmale\n2.000000\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n4345805\n54\nmale\n3.000000\n3\n0.3611111\n0.0416667\n72\ninclude\n\n\n786441188\n27\nfemale\n1.666667\n3\n0.7638889\n0.0000000\n72\ninclude\n\n\n510787584\n34\nfemale\n4.000000\n3\n0.5138889\n0.0138889\n72\ninclude\n\n\n684265529\n19\nnonbinary\n1.000000\n3\n0.5416667\n0.0000000\n72\ninclude\n\n\n47022865\n21\nmale\n1.000000\n3\n0.4722222\n0.0000000\n72\ninclude\n\n\n199802590\n27\nmale\n5.666667\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n295696078\n32\nmale\n1.000000\n3\n0.5416667\n0.0000000\n72\ninclude\n\n\n32034696\n38\nmale\n1.333333\n3\n0.6250000\n0.0000000\n72\ninclude\n\n\n609227927\n18\nmale\nNA\nNA\n0.9861111\n0.0555556\n72\ninclude\n\n\n59367911\n47\nfemale\n1.000000\n3\n0.4861111\n0.0000000\n72\ninclude\n\n\n386661197\n46\nmale\n2.333333\n3\n0.4444444\n0.0000000\n72\ninclude\n\n\n238678139\n38\nfemale\n1.000000\n3\n0.6527778\n0.0000000\n72\ninclude\n\n\n764499289\n52\nmale\n1.666667\n3\n0.5555556\n0.0000000\n72\ninclude\n\n\n586346915\n36\nfemale\n1.000000\n3\n0.5416667\n0.0000000\n72\ninclude\n\n\n100125154\n29\nmale\n2.333333\n3\n0.5138889\n0.0000000\n72\ninclude\n\n\n550721671\n28\nfemale\n1.000000\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n161234436\n25\nmale\n6.666667\n3\n0.5694444\n0.1111111\n72\nexclude\n\n\n621686155\n42\nfemale\n1.000000\n3\n0.5138889\n0.0000000\n72\ninclude\n\n\n238079276\n28\nfemale\n1.666667\n3\n0.5416667\n0.0000000\n72\ninclude\n\n\n561842983\n23\nfemale\n1.000000\n3\n0.9444444\n0.0000000\n72\ninclude\n\n\n627537443\n27\nfemale\n1.000000\n3\n0.6805556\n0.0000000\n72\ninclude\n\n\n591041139\n29\nnonbinary\n3.666667\n3\n0.6111111\n0.0000000\n72\ninclude\n\n\n601833546\n34\nmale\n3.000000\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n874662429\n36\nmale\n3.000000\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n658421880\n53\nfemale\n1.000000\n3\n0.5138889\n0.0000000\n72\ninclude\n\n\n557207580\n28\nfemale\n1.000000\n3\n0.5555556\n0.0000000\n72\ninclude\n\n\n13708908\n25\nmale\n1.000000\n3\n0.5555556\n0.0000000\n72\ninclude\n\n\n699441423\n48\nmale\n1.000000\n3\n0.9861111\n0.0000000\n72\ninclude\n\n\n841303698\n19\nfemale\n1.000000\n3\n0.5833333\n0.0000000\n72\ninclude\n\n\n881713870\n25\nnonbinary\n5.333333\n3\n0.4861111\n0.0000000\n72\ninclude\n\n\n663795436\n39\nfemale\n1.000000\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n422087765\n45\nfemale\n1.000000\n3\n0.4861111\n0.0000000\n72\ninclude\n\n\n343944905\n31\nmale\n4.666667\n3\n0.5277778\n0.3194444\n72\nexclude\n\n\n920212493\n61\nmale\n1.333333\n3\n0.8611111\n0.0000000\n72\ninclude\n\n\n526570034\n63\nmale\n1.000000\n3\n0.6111111\n0.0000000\n72\ninclude\n\n\n882246022\n61\nmale\n1.000000\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n904883244\n59\nmale\n1.000000\n3\n0.6111111\n0.0000000\n72\ninclude\n\n\n293831276\n60\nfemale\n1.000000\n3\n0.0694444\n0.0000000\n72\ninclude\n\n\n530863876\n42\nmale\n2.666667\n3\n0.4305556\n0.0000000\n72\ninclude\n\n\n753565148\n26\nfemale\n1.000000\n3\n0.5555556\n0.0000000\n72\ninclude\n\n\n727031797\n27\nmale\n1.000000\n3\n0.7361111\n0.0555556\n72\ninclude\n\n\n751712225\n22\nfemale\n1.000000\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n464934738\n21\nmale\n2.000000\n3\n0.4861111\n0.0833333\n72\ninclude\n\n\n563522777\n53\nmale\n2.666667\n3\n0.5000000\n0.0833333\n72\ninclude\n\n\n373740279\n51\nfemale\n1.000000\n3\n0.6250000\n0.0000000\n72\ninclude\n\n\n589607780\n35\nfemale\n1.000000\n3\n0.4861111\n0.0000000\n72\ninclude\n\n\n681045009\n26\nmale\n3.000000\n3\n0.9583333\n0.0416667\n72\ninclude\n\n\n855399085\n32\nfemale\n1.000000\n3\n0.0000000\n0.0000000\n72\ninclude\n\n\n821599197\n45\nfemale\n1.000000\n3\n0.3611111\n0.0000000\n72\ninclude\n\n\n311497290\n48\nmale\n3.000000\n3\n0.2916667\n0.0000000\n72\ninclude\n\n\n254118946\n64\nfemale\n2.666667\n3\n0.4583333\n0.0000000\n72\ninclude\n\n\n317124448\n36\nfemale\n1.000000\n3\n0.8750000\n0.0000000\n72\ninclude\n\n\n730068356\n51\nfemale\n1.000000\n3\n0.9444444\n0.0000000\n72\ninclude\n\n\n236383059\n37\nmale\n1.000000\n3\n0.4861111\n0.0000000\n72\ninclude\n\n\n246374429\n21\nfemale\n1.000000\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n952386283\n26\nfemale\n2.333333\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n694264273\n31\nmale\n2.333333\n3\n0.5972222\n0.0000000\n72\ninclude\n\n\n175188025\n42\nmale\n1.000000\n3\n0.8194444\n0.0000000\n72\ninclude\n\n\n339232704\n31\nmale\n2.000000\n3\n0.7777778\n0.0000000\n72\ninclude\n\n\n386456897\n23\nmale\n1.333333\n3\n0.4722222\n0.0000000\n72\ninclude\n\n\n637668138\n30\nmale\n2.000000\n3\n0.5000000\n0.0138889\n72\ninclude\n\n\n237498336\n49\nmale\n1.000000\n3\n0.5833333\n0.0000000\n72\ninclude\n\n\n631750145\n24\nfemale\n1.000000\n3\n0.5138889\n0.1250000\n72\nexclude\n\n\n867476338\n29\nfemale\n1.000000\n3\n0.4722222\n0.0000000\n72\ninclude\n\n\n196574198\n21\nfemale\n1.000000\n3\n0.8888889\n0.0000000\n72\ninclude\n\n\n692009266\n31\nmale\n1.000000\n3\n0.5416667\n0.0000000\n72\ninclude\n\n\n477618299\n53\nmale\n1.000000\n3\n0.6388889\n0.0000000\n72\ninclude\n\n\n325830955\n50\nmale\n4.333333\n3\n0.5694444\n0.0277778\n72\ninclude\n\n\n965314508\n28\nmale\n1.000000\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n72442795\n19\nfemale\n1.666667\n3\n0.9444444\n0.0000000\n72\ninclude\n\n\n216287717\n50\nfemale\n3.333333\n3\n0.5277778\n0.0000000\n72\ninclude\n\n\n287027128\n37\nfemale\n1.000000\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n247697997\n20\nmale\n2.000000\n3\n0.6250000\n0.0000000\n72\ninclude\n\n\n954130481\n50\nfemale\n1.000000\n3\n0.5138889\n0.0000000\n72\ninclude\n\n\n564734227\n30\nmale\n1.666667\n3\n0.3750000\n0.1527778\n72\nexclude\n\n\n797453632\n21\nmale\n1.000000\n3\n0.5833333\n0.0138889\n72\ninclude\n\n\n85445170\n26\nmale\n1.000000\n3\n0.4583333\n0.1805556\n72\nexclude\n\n\n614285355\n59\nmale\n1.000000\n3\n0.5694444\n0.0000000\n72\ninclude\n\n\n14943693\n39\nmale\n1.333333\n3\n0.9722222\n0.0000000\n72\ninclude\n\n\n920896673\n35\nmale\n1.000000\n3\n0.4722222\n0.0555556\n72\ninclude\n\n\n75092407\n22\nfemale\n1.000000\n3\n0.4027778\n0.0277778\n72\ninclude\n\n\n83185292\n39\nmale\n3.333333\n3\n0.4305556\n0.0000000\n72\ninclude\n\n\n234276163\n55\nfemale\n1.000000\n3\n0.8472222\n0.0000000\n72\ninclude\n\n\n940229231\n45\nmale\n3.000000\n3\n0.6805556\n0.0000000\n72\ninclude\n\n\n456445084\n48\nmale\n1.000000\n3\n0.5138889\n0.0000000\n72\ninclude\n\n\n102678881\n32\nmale\n1.000000\n3\n0.9861111\n0.0000000\n72\ninclude\n\n\n187172011\n51\nfemale\n1.000000\n3\n0.9861111\n0.0000000\n72\ninclude\n\n\n108266335\n32\nfemale\n1.000000\n3\n0.6111111\n0.0000000\n72\ninclude\n\n\n752580117\n35\nmale\n1.000000\n3\n0.1388889\n0.0000000\n72\ninclude\n\n\n506524197\n36\nmale\n2.000000\n3\n0.5555556\n0.0000000\n72\ninclude\n\n\n524337317\n29\nmale\n1.666667\n3\n0.5555556\n0.0000000\n72\ninclude\n\n\n759418836\n32\nmale\n1.000000\n3\n0.9722222\n0.0138889\n72\ninclude\n\n\n233735378\nNA\nNA\n1.666667\n3\n0.5000000\n0.0000000\n72\ninclude\n\n\n246532124\nNA\nNA\n4.000000\n1\n0.5486111\n0.0069444\n144\ninclude\n\n\n494447594\nNA\nNA\n1.000000\n3\n0.8750000\n0.0000000\n72\ninclude\n\n\n893377996\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#saving-.csv-files",
    "href": "chapters/loading_data.html#saving-.csv-files",
    "title": "4  Loading, viewing, and saving data",
    "section": "4.3 Saving .csv files",
    "text": "4.3 Saving .csv files\nWriting .csv files to disk is as easy as loading them.\n\n\nCode\nwrite.csv(x = dat_processed, # the data frame to save\n          file = \"../data/processed/data_processed.csv\") # the file to save it to",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#loading-.xlsx-files",
    "href": "chapters/loading_data.html#loading-.xlsx-files",
    "title": "4  Loading, viewing, and saving data",
    "section": "4.4 Loading .xlsx files",
    "text": "4.4 Loading .xlsx files\nWhile .csv files are a good default file format to use for most projects, Excel, SPSS, and other file formats can also be loaded.\nThere are several packages available to load Excel files in particular. Any of them are fine except library(xlsx) which requires you to install rJava, which often causes compatibility issues. library(readxl) is a safer bet. Because excel files can contain multiple sheets, the source can be specified with the sheet argument.\n\n\nCode\nlibrary(readxl)\n\ndat_likert_1 &lt;- readxl::read_excel(path = \"../data/raw/data_likert.xlsx\", \n                                   sheet = \"data1\")\n\n\n\n4.4.1 Check your learning\nQuestion: How would you know what arguments readxl::read_excel() takes?\n\n\n\n\n\n\nClick to show answer\n\n\n\n\n\nBy consulting the help menu with /Users/Ian-Hussey/Library/R/arm64/4.5/library/readxl/help/read_excel.\n\n\n\n\n\n4.4.2 Preserving the raw data / skipping rows when loading\nWith a few exceptions (e.g., removing identifying information before making data public), you should not manually modify raw data.\nSometimes extra rows etc. make a data file harder to read into R. For example, the column names in ‘data_likert.xlsx’ are on the fourth row, causing a mess when you load the file:\n\n\nCode\n# head() allows you to see the first few rows of an R object. conversely, tail() shows the last few. \nhead(dat_likert_1)\n\n\n# A tibble: 6 × 5\n  `Date created: 02/04/2024` ...2  ...3    ...4     ...5    \n  &lt;chr&gt;                      &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;   \n1 subset: sample 1           &lt;NA&gt;  &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;    \n2 &lt;NA&gt;                       &lt;NA&gt;  &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;    \n3 date                       group subject likert_1 likert_2\n4 44735                      1     1       1        4       \n5 44735                      2     2       3        3       \n6 44735                      2     3       2        1       \n\n\nHandle with with code, not by deleting the information in those rows. When using read.csv() or readxl::read_excel() this can be done using the skip argument.\n\n\nCode\ndat_likert_1 &lt;- readxl::read_excel(path = \"../data/raw/data_likert.xlsx\", \n                                   sheet = \"data1\", \n                                   skip = 3)\n\ndat_likert_1\n\n\n# A tibble: 5 × 5\n  date                group subject likert_1 likert_2\n  &lt;dttm&gt;              &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 2022-06-23 00:00:00     1       1        1        4\n2 2022-06-23 00:00:00     2       2        3        3\n3 2022-06-23 00:00:00     2       3        2        1\n4 2022-06-23 00:00:00     1       4        5        5\n5 2022-06-23 00:00:00     1       5        3        3",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#combining-multiple-data-sets",
    "href": "chapters/loading_data.html#combining-multiple-data-sets",
    "title": "4  Loading, viewing, and saving data",
    "section": "4.5 Combining multiple data sets",
    "text": "4.5 Combining multiple data sets\nYou can combine multiple data sets with (nearly) the same structure using dplyr::bind_rows(). In this case, ‘data_likert.xlsx’ have mostly the same columns, with sheet 1 also having the ‘likert_2’ column. Missing columns are filled with NA when using dplyr::bind_rows(). This has its advantages over base R’s rbind() which requires that column names must match between the objects.\n\n\nCode\nlibrary(dplyr)\n\ndat_likert_1 &lt;- readxl::read_excel(\"../data/raw/data_likert.xlsx\", sheet = \"data1\", skip = 3)\ndat_likert_2 &lt;- readxl::read_excel(\"../data/raw/data_likert.xlsx\", sheet = \"data2\", skip = 3)\n\ndat_likert &lt;- dplyr::bind_rows(dat_likert_1,\n                               dat_likert_2)\n\ndat_likert\n\n\n# A tibble: 10 × 5\n   date                group subject likert_1 likert_2\n   &lt;dttm&gt;              &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 2022-06-23 00:00:00     1       1        1        4\n 2 2022-06-23 00:00:00     2       2        3        3\n 3 2022-06-23 00:00:00     2       3        2        1\n 4 2022-06-23 00:00:00     1       4        5        5\n 5 2022-06-23 00:00:00     1       5        3        3\n 6 2022-06-23 00:00:00     1       6        1       NA\n 7 2022-06-23 00:00:00     2       7        3       NA\n 8 2022-06-23 00:00:00     2       8        2       NA\n 9 2022-06-23 00:00:00     1       9        5       NA\n10 2022-06-23 00:00:00     1      10        3       NA",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#loading-and-writing-.rda-files",
    "href": "chapters/loading_data.html#loading-and-writing-.rda-files",
    "title": "4  Loading, viewing, and saving data",
    "section": "4.6 Loading and writing .rda files",
    "text": "4.6 Loading and writing .rda files\nR objects can also be saved and loaded as .rda files. This can be very useful if you want to a) compress the data to make it smaller (using the compress = \"gz\" argument) or b) to preserve things like column types and factor levels. However, it does slightly reduce the interoperability of the data as not everyone else uses R.\n\n\nCode\nlibrary(readr)\n\n# write\nreadr::write_rds(x = dat_likert, \n                 file = \"../data/raw/dat_likert.rda\",\n                 compress = \"gz\")\n\n# read\ndat_likert &lt;- readr::read_rds(file = \"../data/raw/dat_likert.rda\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/loading_data.html#loading-multiple-data-files-at-once",
    "href": "chapters/loading_data.html#loading-multiple-data-files-at-once",
    "title": "4  Loading, viewing, and saving data",
    "section": "4.7 Loading multiple data files at once",
    "text": "4.7 Loading multiple data files at once\nSome psychology software such as PsychoPy often saves each participant’s data as a separate .csv file. FYI you can write code to find all files of a given type (e.g., .csv) in a folder, read them all in, and bind all the data together as a single data frame. Note that this code uses some packages and functions we won’t cover until later in the course. I include it here just so that you know that it can be done quite easily.\n\n\nCode\nlibrary(purrr)\n\n# list all the files in a directory\nfile_names &lt;- list.files(path = \"../data/raw/individual_files\", \n                         pattern = \"\\\\.csv$\", \n                         full.names = TRUE)\n\n# use (or 'map') the read_csv function onto each of the file names \ndata_combined &lt;- purrr::map_dfr(.x = file_names, .f = read.csv)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Loading, viewing, and saving data</span>"
    ]
  },
  {
    "objectID": "chapters/the_pipe.html",
    "href": "chapters/the_pipe.html",
    "title": "5  The pipe",
    "section": "",
    "text": "5.1 Exploring data",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>The pipe</span>"
    ]
  },
  {
    "objectID": "chapters/the_pipe.html#exploring-data",
    "href": "chapters/the_pipe.html#exploring-data",
    "title": "5  The pipe",
    "section": "",
    "text": "5.1.1 Count number of rows\nA very early step in any data processing is to understand how many rows are in a data frame, as this often represents the number of participants or total number of trials. This is useful to check at multiple steps of your data processing to make sure you have not done something wrong.\n\n\nCode\nlibrary(readr)\nlibrary(dplyr)\n\n# demographics data\ndata_demographics_raw &lt;- read_csv(file = \"../data/raw/data_demographics_raw.csv\") \n\n# self report measure data\ndata_selfreport_raw &lt;- read_csv(file = \"../data/raw/data_selfreport_raw.csv\") \n\n# affect attribution procedure data\ndata_amp_raw &lt;- read_csv(file = \"../data/raw/data_amp_raw.csv\")\n\nnrow(data_demographics_raw)\n\n\n[1] 200\n\n\nCode\nnrow(data_selfreport_raw)\n\n\n[1] 392\n\n\nCode\nnrow(data_amp_raw)\n\n\n[1] 8224\n\n\n\nWhy are there different number of rows in the three data frames when this data all comes from the same participants?\nWhy are the numbers not round?\n\n\n\n5.1.2 Viewing column names\nHow would you know what variables are in a data frame? You can view the data frame, but it can also be useful to print them. Knowing what you have is one of the first steps to working with it.\n\n\nCode\n# print all column names\ncolnames(data_demographics_raw)\n\n\n [1] \"date\"           \"time\"           \"group\"          \"subject\"       \n [5] \"session\"        \"build\"          \"blocknum\"       \"trialnum\"      \n [9] \"blockcode\"      \"trialcode\"      \"pretrialpause\"  \"posttrialpause\"\n[13] \"trialduration\"  \"trialtimeout\"   \"response\"       \"correct\"       \n[17] \"latency\"       \n\n\nCode\n# print all column names as a vector\ndput(colnames(data_demographics_raw))\n\n\nc(\"date\", \"time\", \"group\", \"subject\", \"session\", \"build\", \"blocknum\", \n\"trialnum\", \"blockcode\", \"trialcode\", \"pretrialpause\", \"posttrialpause\", \n\"trialduration\", \"trialtimeout\", \"response\", \"correct\", \"latency\"\n)\n\n\nCode\ndata_demographics_raw %&gt;%\n  colnames() %&gt;%\n  dput()\n\n\nc(\"date\", \"time\", \"group\", \"subject\", \"session\", \"build\", \"blocknum\", \n\"trialnum\", \"blockcode\", \"trialcode\", \"pretrialpause\", \"posttrialpause\", \n\"trialduration\", \"trialtimeout\", \"response\", \"correct\", \"latency\"\n)\n\n\nCode\ndata_selfreport_raw %&gt;%\n  colnames() %&gt;%\n  dput()\n\n\nc(\"date\", \"time\", \"group\", \"subject\", \"session\", \"build\", \"blocknum\", \n\"trialnum\", \"blockcode\", \"trialcode\", \"pretrialpause\", \"posttrialpause\", \n\"trialduration\", \"trialtimeout\", \"response\", \"correct\", \"latency\"\n)\n\n\nCode\ndata_amp_raw %&gt;%\n  colnames() %&gt;%\n  dput()\n\n\nc(\"date\", \"time\", \"subject\", \"blockcode\", \"Blocknum and trialnum\", \n\"trialcode\", \"primestim\", \"targetstim\", \"correct\", \"latency\")\n\n\n\n\n5.1.3 Viewing column names and types\n\n\nCode\nhead(data_demographics_raw) \n\n\n# A tibble: 6 × 17\n  date       time        group subject session build blocknum trialnum blockcode\n  &lt;date&gt;     &lt;time&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n1 2022-06-23 10:46:30   8.66e8  5.49e8       1 6.6.0        1        2 demograp…\n2 2022-06-23 10:46:30   8.66e8  5.49e8       1 6.6.0        1        3 demograp…\n3 2022-06-23 11:54:55   6.31e8  5.05e8       1 6.6.0        1        2 demograp…\n4 2022-06-23 11:54:55   6.31e8  5.05e8       1 6.6.0        1        3 demograp…\n5 2022-06-23 12:23:32   5.69e8  9.95e8       1 6.6.0        1        2 demograp…\n6 2022-06-23 12:23:32   5.69e8  9.95e8       1 6.6.0        1        3 demograp…\n# ℹ 8 more variables: trialcode &lt;chr&gt;, pretrialpause &lt;dbl&gt;,\n#   posttrialpause &lt;dbl&gt;, trialduration &lt;dbl&gt;, trialtimeout &lt;dbl&gt;,\n#   response &lt;chr&gt;, correct &lt;dbl&gt;, latency &lt;dbl&gt;\n\n\nCode\nhead(data_selfreport_raw)\n\n\n# A tibble: 6 × 17\n  date     time         group  subject session build blocknum trialnum blockcode\n  &lt;chr&gt;    &lt;time&gt;       &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n1 23.06.22 12:37:34 762566308   8.93e8       1 06.0…        1        1 scale    \n2 23.06.22 12:37:34 762566308   8.93e8       1 06.0…        1        2 scale    \n3 23.06.22 12:26:48 569179372   9.95e8       1 06.0…        1        1 scale    \n4 23.06.22 12:26:48 569179372   9.95e8       1 06.0…        1        2 scale    \n5 23.06.22 12:26:48 569179372   9.95e8       1 06.0…        1        3 scale    \n6 23.06.22 12:26:48 569179372   9.95e8       1 06.0…        1        4 scale    \n# ℹ 8 more variables: trialcode &lt;chr&gt;, pretrialpause &lt;dbl&gt;,\n#   posttrialpause &lt;dbl&gt;, trialduration &lt;dbl&gt;, trialtimeout &lt;dbl&gt;,\n#   response &lt;chr&gt;, correct &lt;dbl&gt;, latency &lt;dbl&gt;\n\n\nCode\nhead(data_amp_raw)\n\n\n# A tibble: 6 × 10\n  date     time     subject blockcode Blocknum and trialnu…¹ trialcode primestim\n  &lt;chr&gt;    &lt;time&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;                  &lt;chr&gt;         &lt;dbl&gt;\n1 23.06.22 10:46:38  5.49e8 practice  1_4                    prime_ne…         0\n2 23.06.22 10:46:38  5.49e8 practice  1_5                    prime_ne…         0\n3 23.06.22 10:46:38  5.49e8 practice  1_6                    prime_po…         0\n4 23.06.22 10:46:38  5.49e8 test      2_1                    instruct…         0\n5 23.06.22 11:55:36  5.05e8 practice  1_4                    prime_ne…         0\n6 23.06.22 11:55:36  5.05e8 practice  1_5                    prime_po…         0\n# ℹ abbreviated name: ¹​`Blocknum and trialnum`\n# ℹ 3 more variables: targetstim &lt;dbl&gt;, correct &lt;dbl&gt;, latency &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>The pipe</span>"
    ]
  },
  {
    "objectID": "chapters/the_pipe.html#the-pipe-or",
    "href": "chapters/the_pipe.html#the-pipe-or",
    "title": "5  The pipe",
    "section": "5.2 The pipe (%>% or |>)",
    "text": "5.2 The pipe (%&gt;% or |&gt;)\n%&gt;% is the original pipe created for the {magrittr} package and used throughout the tidyverse packages. It is slightly slower but also more flexible.\n|&gt; is a version of the pipe more recently added to base-R. It is slightly faster but less flexible.\nIf you’re not sure, it’s easier to use %&gt;%.\n\n5.2.1 What is the pipe?\nThe output of what is left of the pipe is used as the input to the right of the pipe, usually as the first argument or the data argument.\n\n\nCode\nlibrary(janitor)\n\n# use a function without the pipe\nexample_without_pipe &lt;- janitor::clean_names(data_demographics_raw)\n\n# use a function with the pipe. \nexample_with_pipe &lt;- data_demographics_raw %&gt;%\n  janitor::clean_names()\n\n# check they produce identical results\nidentical(example_without_pipe, example_with_pipe)\n\n\n[1] TRUE\n\n\n\n\n5.2.2 Why use the pipe?\nThe pipe allows us to write code that reads from top to bottom, following a series of steps, in the way that humans organize and describe steps. Without the pipe, code is written from the inside out, in the way that the computer understands it but humans do not as easily.\nThe utility of this becomes more obvious when there are many steps:\n\n\nCode\n# use a series of functions without the pipe\nexample2_without_pipe &lt;- summarise(group_by(mutate(rename(clean_names(dat = data_amp_raw), unique_id = subject, block = blockcode, trial_type = trialcode, rt = latency), fast_trial = ifelse(rt &lt; 100, 1, 0)), unique_id), percent_fast_trials = mean(fast_trial)*100) \n\n# use a series of functions with the pipe\nexample2_with_pipe &lt;- data_amp_raw %&gt;%\n  # clean the column names\n  clean_names() %&gt;%\n  # rename the columns\n  rename(unique_id = subject,\n         block = blockcode,\n         trial_type = trialcode,\n         rt = latency) %&gt;%\n  # create a new variable using existing ones\n  mutate(fast_trial = ifelse(rt &lt; 100, 1, 0)) %&gt;%\n  # summarize across trials for each participant\n  group_by(unique_id) %&gt;%\n  summarise(percent_fast_trials = mean(fast_trial)*100) \n\n# check they produce identical results\nidentical(example2_without_pipe, example2_with_pipe)\n\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>The pipe</span>"
    ]
  },
  {
    "objectID": "chapters/the_pipe.html#using-the-pipe-cleaning-column-names",
    "href": "chapters/the_pipe.html#using-the-pipe-cleaning-column-names",
    "title": "5  The pipe",
    "section": "5.3 Using the pipe & cleaning column names",
    "text": "5.3 Using the pipe & cleaning column names\nIt is almost always useful to start by converting all column names to ones that play nice with R/tidyverse and which use the same naming convention (e.g., snake_case, which is standard in tidyverse).\nHow would you bring up the help menu to understand how janitor::clean_names() works?\nRewrite each of the below to use the pipe.\n\n\nCode\ndata_demographics_clean_names &lt;- data_demographics_raw %&gt;%\n  clean_names() \n\ndata_selfreport_clean_names &lt;- data_selfreport_raw %&gt;%\n  clean_names() \n\ndata_amp_clean_names &lt;- data_amp_raw %&gt;%\n  clean_names()",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>The pipe</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html",
    "href": "chapters/data_transformation.html",
    "title": "6  Data transformation",
    "section": "",
    "text": "6.1 Dependencies and data\n[[This data comes from a real study on implicit and self-reported evaluations. The implementation of the procedure produced three data files: one for the demographics data, one for the self-reported evaluations, and one for the implicit measure (the ‘Affect Misattribution Procedure’). This script uses each of these to learn and practice functions from the readr, dplyr, and tidyr libraries that are commonly used for data wrangling. In doing so, we will learn how to do many of the steps involved in data processing for a given experiment.]]\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(janitor) # for clean_names() and round_half_up()\nlibrary(roundwork) # for round_up()\nlibrary(stringr)\nlibrary(knitr) # for kable()\nlibrary(kableExtra) # for kable_classic()\n\n# demographics data\ndata_demographics_raw &lt;- read_csv(file = \"../data/raw/data_demographics_raw.csv\") \n\n# self report measure data\ndata_selfreport_raw &lt;- read_csv(file = \"../data/raw/data_selfreport_raw.csv\") \n\n# affect attribution procedure data\ndata_amp_raw &lt;- read_csv(file = \"../data/raw/data_amp_raw.csv\")\n\n# clean column names\ndata_demographics_clean_names &lt;- data_demographics_raw %&gt;%\n  clean_names() \n\ndata_selfreport_clean_names &lt;- data_selfreport_raw %&gt;%\n  clean_names() \n\ndata_amp_clean_names &lt;- data_amp_raw %&gt;%\n  clean_names()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#renaming-columns",
    "href": "chapters/data_transformation.html#renaming-columns",
    "title": "6  Data transformation",
    "section": "6.2 Renaming columns",
    "text": "6.2 Renaming columns\nOften variable names are not intuitive. An early step in any data wrangling is to make them more intuitive.\nRename the self reports and AMP data too.\n\n\nCode\ndata_demographics_renamed &lt;- data_demographics_clean_names %&gt;%\n  rename(unique_id = subject,\n         item = trialcode,\n         rt_ms = latency) \n\ndata_selfreport_renamed &lt;- data_selfreport_clean_names %&gt;%\n  rename(unique_id = subject,\n         item = trialcode,\n         rt_ms = latency) \n\ndata_amp_renamed &lt;- data_amp_clean_names %&gt;%\n  rename(unique_id = subject,\n         block_type = blockcode,\n         trial_type = trialcode,\n         trial_id = blocknum_and_trialnum,\n         rt_ms = latency)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#selecting-columns",
    "href": "chapters/data_transformation.html#selecting-columns",
    "title": "6  Data transformation",
    "section": "6.3 Selecting columns",
    "text": "6.3 Selecting columns\nNot all variables are useful to you. An early step in any data wrangling is to drop the columns that you don’t need.\nSelect the self reports and AMP data too.\n\n\nCode\ndata_demographics_selected_columns &lt;- data_demographics_renamed %&gt;%\n  select(unique_id, item, response)\n\ndata_selfreport_selected_columns &lt;- data_selfreport_renamed %&gt;%\n  select(unique_id, item, response, rt_ms)\n\ndata_amp_selected_columns &lt;- data_amp_renamed %&gt;%\n  select(unique_id, \n         # methods variables\n         block_type,\n         trial_type,\n         trial_id,\n         # responses \n         rt_ms, \n         correct)\n\n\n\n6.3.1 More flexible selecting\n\n\nCode\ndat &lt;- data.frame(\n  var_1_1 = rnorm(n = 100),\n  var_1_2 = rnorm(n = 100),\n  var_1_3 = rnorm(n = 100),\n  var_1_4 = rnorm(n = 100),\n  var_1_5 = rnorm(n = 100),\n  var_2_1 = rnorm(n = 100),\n  var_2_2 = rnorm(n = 100),\n  var_2_3 = rnorm(n = 100),\n  var_2_4 = rnorm(n = 100),\n  var_2_5 = rnorm(n = 100)\n)\n\ndat |&gt;\n  select(starts_with(\"var_1\")) \n\n\n         var_1_1      var_1_2       var_1_3      var_1_4      var_1_5\n1    0.774106313 -0.794155974 -1.6375029034  0.759612478  0.971791323\n2   -1.903705659  0.488561704  1.0262564252 -1.633467941  0.490470439\n3    0.356947611  0.179722381 -0.7257685424  0.744602894  0.180996855\n4    1.295393358 -1.056151692 -0.0611408296  0.758839565  1.585665152\n5    2.384195479  0.363269226 -0.4221133173 -1.519768914 -0.880791357\n6    1.988752941 -0.937638237 -0.6148904435 -1.924397075 -1.270684762\n7   -0.496321792  0.636663282  0.2622821721 -0.425151053 -0.111424689\n8   -1.271753236 -1.554947263 -0.5609248027 -0.187608083 -0.204193754\n9   -1.712707179 -1.117131964  0.1613662143 -1.087720715 -0.813667654\n10  -0.148297525  0.922042681  2.1694598913  0.734508671  0.581378390\n11   1.198779359 -1.422979752  1.0665209624 -0.523409419  1.943186405\n12  -0.895295624 -1.718779017  0.8897932169 -0.613094506 -0.051042670\n13  -0.353169613 -0.528479056  0.8856571286  1.290701722 -0.597071630\n14  -0.134910959 -1.143547709 -1.1568779118  1.215844061  0.339871166\n15  -1.205254177  0.583225821 -0.3263742003 -1.014899890 -0.524982100\n16  -0.555999292  0.753317168 -0.2835660656  0.127206776 -0.884115416\n17  -0.520265454  0.411517786  1.1169538523  2.031941330 -0.290917713\n18   1.088480359 -0.759178340 -0.8456573318 -1.618438251  0.104617757\n19  -1.437028561  0.681945875  0.0780275591 -0.206751045 -0.027875871\n20  -0.822474953  1.397063605 -0.9940777701 -0.120558921  1.206766045\n21  -1.406663495 -0.862626067 -0.0455379310 -1.830148426  1.222472199\n22  -1.023054053 -1.040055409 -0.6416746798 -0.533770548 -0.261013448\n23   0.584655757 -0.002026757  0.5946667199 -1.525419356 -1.078025934\n24   0.513600194 -0.130611132 -0.5754246523 -1.135584980  0.448336484\n25   0.686671983  0.857968455  0.5782139786 -0.694948540  0.474555269\n26  -1.027631299  0.005281957 -1.6764636237 -0.175010877  0.952826636\n27   0.430560578  1.831328327  0.7306339133  0.327920843 -1.874445783\n28   0.734408878 -2.014126255 -0.0366862017  0.678686439  2.111368673\n29   1.474121875 -1.162814845  1.4150947265  0.531144080  0.802419224\n30   2.664475936 -0.302060443 -1.2939690825  1.122965178 -1.574296524\n31  -0.399286993 -1.229505441  1.7277021421  0.551170174  1.683100876\n32  -2.064963346 -0.340754458  0.9550875644 -0.584300924 -1.231348414\n33   0.432027973 -0.660450305 -1.1945888981  0.482052130  0.100214447\n34   0.640508948  2.637624330  0.2034681246  0.227794052  0.114399025\n35  -0.028491439  1.373028471  0.0444810602 -1.962402741 -0.735970939\n36  -1.104422060 -1.150498258 -1.1943393180 -0.645815280 -1.304630712\n37  -2.099696701 -0.611922520 -0.2466345657 -1.521821920 -0.762003182\n38   0.723466752 -0.814343194 -0.5706255151 -0.891777482  0.331439046\n39   0.106738467 -1.002936086  1.9149821985 -0.875227385 -1.425069746\n40  -1.072208987  0.352171826 -0.8624357143  0.379481959  1.257291948\n41   0.129465379  0.527203733 -0.7893097078 -0.826578378  0.283170062\n42  -0.678308466 -0.703635518  1.0512154256  0.755100250  0.373767375\n43   0.394083789  0.387415766 -0.2557039550 -0.041512570  0.842759500\n44   0.752720547 -0.627644262  1.6127521883 -1.480336629 -0.758113579\n45  -2.106986981  0.743759543 -0.0590668467  1.066095138  0.888684962\n46   0.751582570  0.019643899  0.4030071462 -0.398551779  0.122934507\n47  -1.111830845 -0.745744431 -0.2910898860  0.377559343 -0.488106081\n48  -1.826586459 -0.270276349 -0.5990528278  0.591021082  0.628872486\n49   1.010747215 -1.498766306  0.0017399004 -1.558828553 -0.518159576\n50  -0.994849748 -0.124454090  0.0372906839  0.610054135  1.379612932\n51   1.824116089  0.590505024  0.2427646606  0.006676295  1.386482776\n52  -1.308074060 -0.918293830 -0.6093243451  0.248535190 -0.173259301\n53  -0.843439744 -0.461695148 -0.4104482880 -1.496754534  1.053006741\n54   0.658218728 -0.296568062  0.8156994382 -0.831975571 -0.185435534\n55   0.945128963 -0.769734659 -0.0480326557 -0.692149808  1.191616767\n56  -0.034747638 -0.687727218  1.3302603018  1.016576182  0.127769368\n57   0.707337005  1.309788424 -0.1053727187 -0.676019959 -0.595923415\n58   0.544143696  2.204749190  0.6808523572 -0.524554083 -0.106119148\n59   0.052203821 -0.312323430 -2.2213771529  1.050483509 -1.921564553\n60  -0.197296198  0.028110460  1.4528393335  0.751801831 -1.153939026\n61   0.160268382  1.486902044  1.6632427353  0.810348936  0.005460479\n62  -1.286812187 -0.320204576  1.0266120025  0.248099672  1.690527683\n63   0.947244995  0.480749861 -1.1526369025 -0.989229144  0.595119668\n64   0.213780014  0.906689542  0.1396219956  0.775480171  0.848650818\n65   0.554332744 -0.758368882 -0.2976903192  1.040531941  0.706994188\n66   0.647141892  0.679551668  0.0005537302 -0.102636071  0.171949658\n67  -0.791344353 -0.663112388 -0.1142509727 -1.149226595 -0.532983464\n68   0.910142339  0.672017990  0.1448877179  0.334895493  0.841830752\n69  -0.290896325 -0.266904747 -0.2219462298 -0.226709635 -0.731403160\n70   0.005199739  1.076485614  0.6337085600 -0.306415140  0.763682204\n71   0.176116056  0.577400535 -1.3568127935 -0.612705897 -0.994286536\n72   0.984500155 -0.381130540 -1.7818213519  0.662204038 -0.360279932\n73  -1.504024888 -1.603143679  0.4923821000  0.660598280 -0.838052261\n74   0.089637762 -0.878754373 -0.7964264141 -0.160795970  0.181431091\n75  -0.308630069 -0.671512812  1.5883057505 -0.620002783  1.309281394\n76   2.170810061 -0.162405440  0.4066217435 -1.915515604 -0.996831057\n77  -0.065166404  0.655047231 -0.4610041848  2.054296532 -2.168841568\n78  -0.602498219  0.735410166  0.5165000581  1.245801249 -1.083219817\n79   2.839734664 -0.014406165  1.2320561050 -0.676419020 -0.295671967\n80   0.872776823  0.422264300 -0.0490700839  0.173376105 -0.358370171\n81  -1.052187555 -1.056090499 -0.6164533063  0.029387423 -0.531396958\n82  -0.096417279 -0.096909334 -0.2889612854  0.571608576  0.664053642\n83   0.685801209 -0.549503178 -0.9746171477 -1.002351889 -0.208087501\n84   0.009856252 -0.169492648 -0.6622475931 -1.276538122  0.745205578\n85  -2.475053166 -0.694779442  0.3321315434  1.506197207  1.226729547\n86  -0.141769895 -1.147059511  0.7230946510  0.390431718 -1.961549744\n87  -0.507682640  0.369873544 -0.0400432699  1.652088344  0.678987206\n88   1.043042567  1.197600871 -0.5901895793 -0.554883182 -0.615839935\n89  -1.078677987 -0.500192051 -1.1300992815  0.032103053 -0.660579352\n90   0.701878931 -0.066366220  0.2287022288  0.344323161  1.246654560\n91  -0.953939550 -0.693969827 -0.7146089894  1.216466605  0.484139341\n92   1.090486951 -0.660878940 -1.4433460933  0.109581242  0.797047142\n93  -0.415927874 -1.358191323  1.8580772761  0.919521292  0.686220872\n94   0.494659915  0.434809698 -1.0006836142  0.810450142  0.935337513\n95   0.073076702  0.192077745  0.3934982417  1.679128828  1.034474458\n96  -0.186347708  0.576106407 -0.8752268682  0.816882968 -0.089281124\n97   0.024608164  0.713698642  1.1308235522 -0.892900074 -1.230959254\n98   0.162673347 -0.362313111  1.0889817110  1.409574756  0.271771037\n99   0.084885682  0.623109842  2.1392968012  1.017824866  1.737503063\n100 -0.014340286  1.536056139  0.0175323367 -0.671150305  1.100279688\n\n\nCode\ndat |&gt;\n  select(ends_with(\"var_1\")) \n\n\ndata frame with 0 columns and 100 rows\n\n\nCode\ndat |&gt;\n  select(contains(\"_1_\")) \n\n\n         var_1_1      var_1_2       var_1_3      var_1_4      var_1_5\n1    0.774106313 -0.794155974 -1.6375029034  0.759612478  0.971791323\n2   -1.903705659  0.488561704  1.0262564252 -1.633467941  0.490470439\n3    0.356947611  0.179722381 -0.7257685424  0.744602894  0.180996855\n4    1.295393358 -1.056151692 -0.0611408296  0.758839565  1.585665152\n5    2.384195479  0.363269226 -0.4221133173 -1.519768914 -0.880791357\n6    1.988752941 -0.937638237 -0.6148904435 -1.924397075 -1.270684762\n7   -0.496321792  0.636663282  0.2622821721 -0.425151053 -0.111424689\n8   -1.271753236 -1.554947263 -0.5609248027 -0.187608083 -0.204193754\n9   -1.712707179 -1.117131964  0.1613662143 -1.087720715 -0.813667654\n10  -0.148297525  0.922042681  2.1694598913  0.734508671  0.581378390\n11   1.198779359 -1.422979752  1.0665209624 -0.523409419  1.943186405\n12  -0.895295624 -1.718779017  0.8897932169 -0.613094506 -0.051042670\n13  -0.353169613 -0.528479056  0.8856571286  1.290701722 -0.597071630\n14  -0.134910959 -1.143547709 -1.1568779118  1.215844061  0.339871166\n15  -1.205254177  0.583225821 -0.3263742003 -1.014899890 -0.524982100\n16  -0.555999292  0.753317168 -0.2835660656  0.127206776 -0.884115416\n17  -0.520265454  0.411517786  1.1169538523  2.031941330 -0.290917713\n18   1.088480359 -0.759178340 -0.8456573318 -1.618438251  0.104617757\n19  -1.437028561  0.681945875  0.0780275591 -0.206751045 -0.027875871\n20  -0.822474953  1.397063605 -0.9940777701 -0.120558921  1.206766045\n21  -1.406663495 -0.862626067 -0.0455379310 -1.830148426  1.222472199\n22  -1.023054053 -1.040055409 -0.6416746798 -0.533770548 -0.261013448\n23   0.584655757 -0.002026757  0.5946667199 -1.525419356 -1.078025934\n24   0.513600194 -0.130611132 -0.5754246523 -1.135584980  0.448336484\n25   0.686671983  0.857968455  0.5782139786 -0.694948540  0.474555269\n26  -1.027631299  0.005281957 -1.6764636237 -0.175010877  0.952826636\n27   0.430560578  1.831328327  0.7306339133  0.327920843 -1.874445783\n28   0.734408878 -2.014126255 -0.0366862017  0.678686439  2.111368673\n29   1.474121875 -1.162814845  1.4150947265  0.531144080  0.802419224\n30   2.664475936 -0.302060443 -1.2939690825  1.122965178 -1.574296524\n31  -0.399286993 -1.229505441  1.7277021421  0.551170174  1.683100876\n32  -2.064963346 -0.340754458  0.9550875644 -0.584300924 -1.231348414\n33   0.432027973 -0.660450305 -1.1945888981  0.482052130  0.100214447\n34   0.640508948  2.637624330  0.2034681246  0.227794052  0.114399025\n35  -0.028491439  1.373028471  0.0444810602 -1.962402741 -0.735970939\n36  -1.104422060 -1.150498258 -1.1943393180 -0.645815280 -1.304630712\n37  -2.099696701 -0.611922520 -0.2466345657 -1.521821920 -0.762003182\n38   0.723466752 -0.814343194 -0.5706255151 -0.891777482  0.331439046\n39   0.106738467 -1.002936086  1.9149821985 -0.875227385 -1.425069746\n40  -1.072208987  0.352171826 -0.8624357143  0.379481959  1.257291948\n41   0.129465379  0.527203733 -0.7893097078 -0.826578378  0.283170062\n42  -0.678308466 -0.703635518  1.0512154256  0.755100250  0.373767375\n43   0.394083789  0.387415766 -0.2557039550 -0.041512570  0.842759500\n44   0.752720547 -0.627644262  1.6127521883 -1.480336629 -0.758113579\n45  -2.106986981  0.743759543 -0.0590668467  1.066095138  0.888684962\n46   0.751582570  0.019643899  0.4030071462 -0.398551779  0.122934507\n47  -1.111830845 -0.745744431 -0.2910898860  0.377559343 -0.488106081\n48  -1.826586459 -0.270276349 -0.5990528278  0.591021082  0.628872486\n49   1.010747215 -1.498766306  0.0017399004 -1.558828553 -0.518159576\n50  -0.994849748 -0.124454090  0.0372906839  0.610054135  1.379612932\n51   1.824116089  0.590505024  0.2427646606  0.006676295  1.386482776\n52  -1.308074060 -0.918293830 -0.6093243451  0.248535190 -0.173259301\n53  -0.843439744 -0.461695148 -0.4104482880 -1.496754534  1.053006741\n54   0.658218728 -0.296568062  0.8156994382 -0.831975571 -0.185435534\n55   0.945128963 -0.769734659 -0.0480326557 -0.692149808  1.191616767\n56  -0.034747638 -0.687727218  1.3302603018  1.016576182  0.127769368\n57   0.707337005  1.309788424 -0.1053727187 -0.676019959 -0.595923415\n58   0.544143696  2.204749190  0.6808523572 -0.524554083 -0.106119148\n59   0.052203821 -0.312323430 -2.2213771529  1.050483509 -1.921564553\n60  -0.197296198  0.028110460  1.4528393335  0.751801831 -1.153939026\n61   0.160268382  1.486902044  1.6632427353  0.810348936  0.005460479\n62  -1.286812187 -0.320204576  1.0266120025  0.248099672  1.690527683\n63   0.947244995  0.480749861 -1.1526369025 -0.989229144  0.595119668\n64   0.213780014  0.906689542  0.1396219956  0.775480171  0.848650818\n65   0.554332744 -0.758368882 -0.2976903192  1.040531941  0.706994188\n66   0.647141892  0.679551668  0.0005537302 -0.102636071  0.171949658\n67  -0.791344353 -0.663112388 -0.1142509727 -1.149226595 -0.532983464\n68   0.910142339  0.672017990  0.1448877179  0.334895493  0.841830752\n69  -0.290896325 -0.266904747 -0.2219462298 -0.226709635 -0.731403160\n70   0.005199739  1.076485614  0.6337085600 -0.306415140  0.763682204\n71   0.176116056  0.577400535 -1.3568127935 -0.612705897 -0.994286536\n72   0.984500155 -0.381130540 -1.7818213519  0.662204038 -0.360279932\n73  -1.504024888 -1.603143679  0.4923821000  0.660598280 -0.838052261\n74   0.089637762 -0.878754373 -0.7964264141 -0.160795970  0.181431091\n75  -0.308630069 -0.671512812  1.5883057505 -0.620002783  1.309281394\n76   2.170810061 -0.162405440  0.4066217435 -1.915515604 -0.996831057\n77  -0.065166404  0.655047231 -0.4610041848  2.054296532 -2.168841568\n78  -0.602498219  0.735410166  0.5165000581  1.245801249 -1.083219817\n79   2.839734664 -0.014406165  1.2320561050 -0.676419020 -0.295671967\n80   0.872776823  0.422264300 -0.0490700839  0.173376105 -0.358370171\n81  -1.052187555 -1.056090499 -0.6164533063  0.029387423 -0.531396958\n82  -0.096417279 -0.096909334 -0.2889612854  0.571608576  0.664053642\n83   0.685801209 -0.549503178 -0.9746171477 -1.002351889 -0.208087501\n84   0.009856252 -0.169492648 -0.6622475931 -1.276538122  0.745205578\n85  -2.475053166 -0.694779442  0.3321315434  1.506197207  1.226729547\n86  -0.141769895 -1.147059511  0.7230946510  0.390431718 -1.961549744\n87  -0.507682640  0.369873544 -0.0400432699  1.652088344  0.678987206\n88   1.043042567  1.197600871 -0.5901895793 -0.554883182 -0.615839935\n89  -1.078677987 -0.500192051 -1.1300992815  0.032103053 -0.660579352\n90   0.701878931 -0.066366220  0.2287022288  0.344323161  1.246654560\n91  -0.953939550 -0.693969827 -0.7146089894  1.216466605  0.484139341\n92   1.090486951 -0.660878940 -1.4433460933  0.109581242  0.797047142\n93  -0.415927874 -1.358191323  1.8580772761  0.919521292  0.686220872\n94   0.494659915  0.434809698 -1.0006836142  0.810450142  0.935337513\n95   0.073076702  0.192077745  0.3934982417  1.679128828  1.034474458\n96  -0.186347708  0.576106407 -0.8752268682  0.816882968 -0.089281124\n97   0.024608164  0.713698642  1.1308235522 -0.892900074 -1.230959254\n98   0.162673347 -0.362313111  1.0889817110  1.409574756  0.271771037\n99   0.084885682  0.623109842  2.1392968012  1.017824866  1.737503063\n100 -0.014340286  1.536056139  0.0175323367 -0.671150305  1.100279688",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#practice-the-pipe-again",
    "href": "chapters/data_transformation.html#practice-the-pipe-again",
    "title": "6  Data transformation",
    "section": "6.4 Practice the pipe again",
    "text": "6.4 Practice the pipe again\nCombine the above function calls using pipes. Notice how this involves fewer objects in your environment, and therefore less potential for confusion or error.\nRemember: this is how we solve coding problems: break them down into smaller tasks and problems, get each of them working individually, then combine them together again. When you only see the end product, it’s easy to think the author simply wrote the code as you see it, when they often wrote much more verbose chunks of code and then combined them together.\nRewrite the rename and select calls for the AMP and self report data too.\n\n\nCode\n# remove all objects in environment\nrm(list = ls())\n\n\ndata_demographics_trimmed &lt;-\n  # read in the data\n  read_csv(\"../data/raw/data_demographics_raw.csv\") %&gt;%\n  \n  # convert to snake case\n  clean_names() %&gt;%\n  \n  # make names more intuitive\n  rename(unique_id = subject,\n         item = trialcode) %&gt;%\n  \n  # retain only columns of interest\n  select(unique_id, item, response)\n\n\ndata_selfreport_trimmed &lt;- \n  read_csv(\"../data/raw/data_selfreport_raw.csv\") %&gt;%\n  clean_names() %&gt;%\n  rename(unique_id = subject,\n         item = trialcode) %&gt;%\n  select(unique_id, item, response)\n\ndata_amp_trimmed &lt;- \n  read_csv(\"../data/raw/data_amp_raw.csv\") %&gt;%\n  clean_names() %&gt;%\n  rename(unique_id = subject,\n         block_type = blockcode,\n         trial_type = trialcode,\n         trial_id = blocknum_and_trialnum,\n         rt_ms = latency) %&gt;%\n  select(unique_id, \n         # methods variables\n         block_type,\n         trial_type,\n         trial_id,\n         # responses \n         rt_ms, \n         correct)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#counting-frequencies",
    "href": "chapters/data_transformation.html#counting-frequencies",
    "title": "6  Data transformation",
    "section": "6.5 Counting frequencies",
    "text": "6.5 Counting frequencies\nAfter renaming and selecting columns, we know what columns we have. But what rows do we have in each of these? What might we need to exclude, change, work with in some way later on? It is very useful to use count() to obtain the frequency of each unique value of a given column\n\n\nCode\ndata_demographics_trimmed %&gt;%\n  count(item)\n\n\n# A tibble: 2 × 2\n  item       n\n  &lt;chr&gt;  &lt;int&gt;\n1 age      100\n2 gender   100\n\n\nCode\ndata_demographics_trimmed %&gt;%\n  count(response)\n\n\n# A tibble: 50 × 2\n   response     n\n   &lt;chr&gt;    &lt;int&gt;\n 1 18           1\n 2 19           4\n 3 20           1\n 4 21           6\n 5 22           2\n 6 23           6\n 7 24           1\n 8 25           3\n 9 26           4\n10 27           5\n# ℹ 40 more rows\n\n\n\n\nCode\ndata_selfreport_trimmed %&gt;%\n  count(item)\n\n\n# A tibble: 4 × 2\n  item             n\n  &lt;chr&gt;        &lt;int&gt;\n1 instructions    99\n2 like            99\n3 positive        97\n4 prefer          97\n\n\nCode\ndata_selfreport_trimmed %&gt;%\n  count(response)\n\n\n# A tibble: 9 × 2\n  response     n\n  &lt;chr&gt;    &lt;int&gt;\n1 1          193\n2 2           43\n3 3           26\n4 4           16\n5 5            7\n6 57          99\n7 6            4\n8 7            3\n9 Ctrl+'B'     1\n\n\n\n\nCode\ndata_amp_trimmed %&gt;%\n  count(trial_type)\n\n\n# A tibble: 5 × 2\n  trial_type                  n\n  &lt;chr&gt;                   &lt;int&gt;\n1 instructions                2\n2 prime_negative           3604\n3 prime_negative_practice   508\n4 prime_positive           3604\n5 prime_positive_practice   506\n\n\nCode\ndata_amp_trimmed %&gt;%\n  count(block_type)\n\n\n# A tibble: 2 × 2\n  block_type     n\n  &lt;chr&gt;      &lt;int&gt;\n1 practice    1014\n2 test        7210\n\n\nCode\ndata_amp_trimmed %&gt;%\n  count(correct)\n\n\n# A tibble: 2 × 2\n  correct     n\n    &lt;dbl&gt; &lt;int&gt;\n1       0  3440\n2       1  4784\n\n\nCode\ndata_amp_trimmed %&gt;%\n  count(rt_ms)\n\n\n# A tibble: 2,165 × 2\n   rt_ms     n\n   &lt;dbl&gt; &lt;int&gt;\n 1     1     2\n 2     3     1\n 3     5     2\n 4     8     1\n 5     9     1\n 6    11     1\n 7    13     1\n 8    14     1\n 9    16     1\n10    18     1\n# ℹ 2,155 more rows\n\n\n\n6.5.1 Frequncies of sets of columns\nNote that it is also possible to use count to obtain the frequencies of sets of unique values across columns, e.g., unique combinations of item and response.\n\n\nCode\ndata_demographics_trimmed %&gt;%\n  count(item)\n\n\n# A tibble: 2 × 2\n  item       n\n  &lt;chr&gt;  &lt;int&gt;\n1 age      100\n2 gender   100\n\n\nCode\ndata_demographics_trimmed %&gt;%\n  count(response)\n\n\n# A tibble: 50 × 2\n   response     n\n   &lt;chr&gt;    &lt;int&gt;\n 1 18           1\n 2 19           4\n 3 20           1\n 4 21           6\n 5 22           2\n 6 23           6\n 7 24           1\n 8 25           3\n 9 26           4\n10 27           5\n# ℹ 40 more rows\n\n\nCode\ndata_demographics_trimmed %&gt;%\n  count(item, response)\n\n\n# A tibble: 51 × 3\n   item  response     n\n   &lt;chr&gt; &lt;chr&gt;    &lt;int&gt;\n 1 age   18           1\n 2 age   19           4\n 3 age   20           1\n 4 age   21           6\n 5 age   22           2\n 6 age   23           5\n 7 age   24           1\n 8 age   25           3\n 9 age   26           4\n10 age   27           5\n# ℹ 41 more rows\n\n\nIt can be useful to arrange the output by the frequencies.\n\n\nCode\ndata_demographics_trimmed %&gt;%\n  count(item, response) %&gt;%\n  arrange(desc(n)) # arrange in descending order\n\n\n# A tibble: 51 × 3\n   item   response     n\n   &lt;chr&gt;  &lt;chr&gt;    &lt;int&gt;\n 1 gender Male        36\n 2 gender female      27\n 3 gender male        18\n 4 gender Female      11\n 5 age    21           6\n 6 age    23           5\n 7 age    27           5\n 8 age    32           5\n 9 age    19           4\n10 age    26           4\n# ℹ 41 more rows",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#filtering-rows",
    "href": "chapters/data_transformation.html#filtering-rows",
    "title": "6  Data transformation",
    "section": "6.6 Filtering rows",
    "text": "6.6 Filtering rows\nOnce we know the contents of our columns, we may wish to exclude some rows using filter().\nYou can specify the logical test for filtering in many ways, including equivalence (==), negation (!=), or membership (%in%). It is often better to define what you do want (using equivalence or membership) rather than what you do not want (negation), as negations are less robust to new data with weird values you didn’t think of when you wrote the code. E.g., you could specify gender != \"non-binary\" but this would not catch non binary. If you were for example looking to include only men and women, instead use gender %in% c(\"man\", \"woman\").*\n*[This is just an example; there is usually no good a priori reason to exclude gender diverse participants]\n\n\nCode\n# example using equivalence\nexample_equivalence &lt;- data_amp_trimmed %&gt;%\n  filter(block_type == \"test\")\n\n# example using negation\nexample_negation &lt;- data_selfreport_trimmed %&gt;%\n  filter(item != \"instructions\")\n\n# example using membership\nexample_membership &lt;- data_selfreport_trimmed %&gt;%\n  filter(item %in% c(\"positive\", \"prefer\", \"like\"))\n\n\n\n6.6.1 Multiple criteria, ‘and’ or ‘or’ combinations\nYou can also have multiple criteria in your filter call, both of which have to be met (x & y), or either one of which have to be met (x | y).\n\n\nCode\nexample_multiple_criteria_1 &lt;- data_amp_trimmed %&gt;%\n  filter(block_type != \"test\" & correct == 1)\n\nexample_multiple_criteria_2 &lt;- data_amp_trimmed %&gt;%\n  filter(block_type != \"test\" | correct == 1)\n\n# note that these provide different results - make sure you understand why\nidentical(example_multiple_criteria_1, example_multiple_criteria_2)\n\n\n[1] FALSE\n\n\n\n\n6.6.2 Practice filtering\nFilter the self reports data frame to remove the instructions. Filter the AMP data frame to remove the practice blocks and the instruction trials.\n\n\nCode\ndata_selfreport_trials &lt;- data_selfreport_trimmed %&gt;%\n  #filter(item != \"instructions\")\n  filter(item %in% c(\"positive\", \"prefer\", \"like\"))\n\n# this probably contains things we don't want\ndata_amp_trimmed %&gt;%\n  count(trial_type, block_type)\n\n\n# A tibble: 5 × 3\n  trial_type              block_type     n\n  &lt;chr&gt;                   &lt;chr&gt;      &lt;int&gt;\n1 instructions            test           2\n2 prime_negative          test        3604\n3 prime_negative_practice practice     508\n4 prime_positive          test        3604\n5 prime_positive_practice practice     506\n\n\nCode\n# we exclude them\ndata_amp_test_trials &lt;- data_amp_trimmed %&gt;%\n  filter(block_type == \"test\") %&gt;%\n  filter(trial_type != \"instructions\")\n\n# check they are excluded\ndata_amp_test_trials %&gt;%\n  count(trial_type, block_type)\n\n\n# A tibble: 2 × 3\n  trial_type     block_type     n\n  &lt;chr&gt;          &lt;chr&gt;      &lt;int&gt;\n1 prime_negative test        3604\n2 prime_positive test        3604\n\n\n\n\n6.6.3 More flexible filtering\nReturn rows with exactly this contents\n\n\nCode\ndata_amp_test_trials |&gt;\n  filter(trial_id == \"A\") # \n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: unique_id &lt;dbl&gt;, block_type &lt;chr&gt;, trial_type &lt;chr&gt;,\n#   trial_id &lt;chr&gt;, rt_ms &lt;dbl&gt;, correct &lt;dbl&gt;\n\n\nReturn rows containing contents but not exactly it\n\n\nCode\nlibrary(stringr)\n\ntest &lt;- c(\"A\", \"AB\", \"B\")\n\ntest == \"A\"\n\n\n[1]  TRUE FALSE FALSE\n\n\nCode\nstr_detect(test, \"A\")\n\n\n[1]  TRUE  TRUE FALSE\n\n\nCode\nstr_detect(test, \"B\")\n\n\n[1] FALSE  TRUE  TRUE\n\n\nCode\ndata_amp_test_trials |&gt;\n  filter(str_detect(trial_id, \"2_\")) \n\n\n# A tibble: 7,208 × 6\n   unique_id block_type trial_type     trial_id rt_ms correct\n       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1 504546409 test       prime_positive 2_2        161       0\n 2 504546409 test       prime_positive 2_3        328       0\n 3 504546409 test       prime_positive 2_4        220       1\n 4 504546409 test       prime_negative 2_5        308       1\n 5 504546409 test       prime_negative 2_6        235       1\n 6 504546409 test       prime_negative 2_7        224       1\n 7 504546409 test       prime_negative 2_8        369       0\n 8 504546409 test       prime_positive 2_9       1105       1\n 9 994692692 test       prime_positive 2_2       1611       0\n10 994692692 test       prime_negative 2_3        627       0\n# ℹ 7,198 more rows\n\n\n\n6.6.3.1 Multiple logical tests\n\n\nCode\n# \"|\" = OR\n# \"&\" = AND\n\ndata_amp_test_trials |&gt;\n  filter(str_detect(trial_id, \"2_\") &\n           str_detect(trial_id, \"3_\"))\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: unique_id &lt;dbl&gt;, block_type &lt;chr&gt;, trial_type &lt;chr&gt;,\n#   trial_id &lt;chr&gt;, rt_ms &lt;dbl&gt;, correct &lt;dbl&gt;\n\n\nCode\ndata_amp_test_trials |&gt;\n  mutate(rt_ms = ifelse(str_detect(trial_id, \"2_\"), rt_ms+100, rt_ms))\n\n\n# A tibble: 7,208 × 6\n   unique_id block_type trial_type     trial_id rt_ms correct\n       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1 504546409 test       prime_positive 2_2        261       0\n 2 504546409 test       prime_positive 2_3        428       0\n 3 504546409 test       prime_positive 2_4        320       1\n 4 504546409 test       prime_negative 2_5        408       1\n 5 504546409 test       prime_negative 2_6        335       1\n 6 504546409 test       prime_negative 2_7        324       1\n 7 504546409 test       prime_negative 2_8        469       0\n 8 504546409 test       prime_positive 2_9       1205       1\n 9 994692692 test       prime_positive 2_2       1711       0\n10 994692692 test       prime_negative 2_3        727       0\n# ℹ 7,198 more rows",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#check-your-learning",
    "href": "chapters/data_transformation.html#check-your-learning",
    "title": "6  Data transformation",
    "section": "6.7 Check your learning",
    "text": "6.7 Check your learning\nWhat is the difference between select and filter?\nWhich is for rows and which is for columns?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#mutating-creating-new-columns-or-changing-the-contents-of-existing-ones",
    "href": "chapters/data_transformation.html#mutating-creating-new-columns-or-changing-the-contents-of-existing-ones",
    "title": "6  Data transformation",
    "section": "6.8 Mutating: creating new columns or changing the contents of existing ones",
    "text": "6.8 Mutating: creating new columns or changing the contents of existing ones\n\n6.8.1 Understanding mutate()\nmutate() is used to create new columns or to change the contents of existing ones.\n\n\nCode\n# mutating new variables\nexample_1 &lt;- data_amp_test_trials %&gt;%\n  mutate(latency_plus_1 = rt_ms + 1)\n\nexample_2 &lt;- data_amp_test_trials %&gt;%\n  mutate(log_latency = log(rt_ms))\n\n# mutating the contents of existing variables\nexample_3 &lt;- data_amp_test_trials %&gt;%\n  mutate(rt_s = rt_ms / 1000) # latency is now in seconds rather than milliseconds\n\n\nThe operations inside mutate can range from the very simple, like the above, to much more complex. The below example uses other functions we haven’t learned yet. For now, just notice that there can be multiple mutate calls and they can produce a cleaned up gender variable.\n\n\nCode\n# illustrate the problem with the gender responses:\ndata_demographics_trimmed %&gt;%\n  # filter only the gender item, not age\n  filter(item == \"gender\") %&gt;%\n  count(response) %&gt;%\n  arrange(desc(n))\n\n\n# A tibble: 11 × 2\n   response       n\n   &lt;chr&gt;      &lt;int&gt;\n 1 Male          36\n 2 female        27\n 3 male          18\n 4 Female        11\n 5 Non-Binary     2\n 6 23             1\n 7 FEMALE         1\n 8 MALE           1\n 9 Woman          1\n10 non binary     1\n11 yes            1\n\n\nCode\n# clean up the gender variable\ndata_demographics_gender_tidy_1 &lt;- data_demographics_trimmed %&gt;%\n  # filter only the gender item, not age\n  filter(item == \"gender\") %&gt;%\n  # change the name of the response variable to what it now represents: gender\n  rename(gender = response) %&gt;%\n  # change or remove weird responses to the gender question\n  mutate(gender = str_to_lower(gender)) %&gt;%\n  mutate(gender = str_remove_all(gender, \"[\\\\d.]\")) %&gt;% # remove everything except letters\n  mutate(gender = na_if(gender, \"\")) %&gt;% \n  mutate(gender = case_when(gender == \"woman\" ~ \"female\",\n                            gender == \"man\" ~ \"male\",\n                            gender == \"girl\" ~ \"female\",\n                            gender == \"yes\" ~ NA_character_,\n                            gender == \"dude\" ~ \"male\",\n                            gender == \"non binary\" ~ \"non-binary\",\n                            TRUE ~ gender)) %&gt;%\n  # select only the columns of interest\n  select(unique_id, gender)\n\n# illustrate the data after cleaning:\ndata_demographics_gender_tidy_1 %&gt;%\n  count(gender) %&gt;%\n  arrange(desc(n))\n\n\n# A tibble: 4 × 2\n  gender         n\n  &lt;chr&gt;      &lt;int&gt;\n1 male          55\n2 female        40\n3 non-binary     3\n4 &lt;NA&gt;           2\n\n\nA single mutate call can contain multiple mutates. The code from the last chunk could be written more simply like this:\n\n\nCode\n# clean up the gender variable\ndata_demographics_gender_tidy_2 &lt;- data_demographics_trimmed %&gt;%\n  # filter only the gender item, not age\n  filter(item == \"gender\") %&gt;%\n  # change the name of the response variable to what it now represents: gender\n  rename(gender = response) %&gt;%\n  # change or remove weird responses to the gender question\n  mutate(gender = str_to_lower(gender),\n         gender = str_remove_all(gender, \"[\\\\d.]\"), # remove everything except letters\n         gender = na_if(gender, \"\"), \n         gender = case_when(gender == \"woman\" ~ \"female\",\n                            gender == \"man\" ~ \"male\",\n                            gender == \"girl\" ~ \"female\",\n                            gender == \"yes\" ~ NA_character_,\n                            gender == \"dude\" ~ \"male\",\n                            gender == \"non binary\" ~ \"non-binary\",\n                            TRUE ~ gender)) %&gt;%\n  # select only the columns of interest\n  select(unique_id, gender)\n\n# check they are identical\nidentical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)\n\n\n[1] TRUE\n\n\n\n\n6.8.2 Practice mutate()\nWhen analyzing cognitive behavioral tasks, it is common to employ mastery criteria to exclude participants who have not met or maintained some criterion within the task. We’ll do the actual exclusions etc. later on, but for practice using mutate() by creating a new fast_trial column to indicate trials where the response was implausibly fast (e.g., &lt; 100 ms).\nTry doing this with a simple logical test of whether latency &lt; 100. You can do this with or without using the ifelse() function.\n\n\nCode\ndata_amp_test_trials_with_fast_trials &lt;- data_amp_test_trials %&gt;%\n  mutate(fast_trial = ifelse(test = rt_ms &lt; 100,\n                             yes = TRUE,\n                             no = FALSE))\n\n# more briefly but less explicitly\ndata_amp_test_trials_with_fast_trials &lt;- data_amp_test_trials %&gt;%\n  mutate(fast_trial = rt_ms &lt; 100)\n\n\n\n\n6.8.3 Practice mutate() & learn ifelse()\nUse mutate() to remove weird values from data_demographics_trimmed$response, for the rows referring to age, that aren’t numbers.\nWhat function could you use to first determine what values are present in this column, to know which could be retained or changed?\nIn simple cases like this, you can use mutate() and ifelse() to change impossible values to NA.\n\n\nCode\n# what values are present?\ndata_demographics_trimmed %&gt;%\n  filter(item == \"age\") %&gt;%\n  count(response) \n\n\n# A tibble: 40 × 2\n   response     n\n   &lt;chr&gt;    &lt;int&gt;\n 1 18           1\n 2 19           4\n 3 20           1\n 4 21           6\n 5 22           2\n 6 23           5\n 7 24           1\n 8 25           3\n 9 26           4\n10 27           5\n# ℹ 30 more rows\n\n\nCode\n# fix them with mutate\ndata_demographics_age_tidy &lt;- data_demographics_trimmed %&gt;%\n  filter(item == \"age\") %&gt;%\n  mutate(response = ifelse(test = response == \"old\",\n                           yes = NA_integer_,\n                           no = response)) %&gt;%\n  mutate(response = as.numeric(response)) %&gt;%\n  rename(age = response)\n\n# check this has fixed the issue\ndata_demographics_age_tidy %&gt;%\n  count(age)\n\n\n# A tibble: 40 × 2\n     age     n\n   &lt;dbl&gt; &lt;int&gt;\n 1    18     1\n 2    19     4\n 3    20     1\n 4    21     6\n 5    22     2\n 6    23     5\n 7    24     1\n 8    25     3\n 9    26     4\n10    27     5\n# ℹ 30 more rows\n\n\n\n\n6.8.4 Practice mutate() & ifelse()\nUse mutate() to remove weird values from data_selfreport_trials$response that aren’t Likert responses.\nFirst determine what values are present in this column.\nUse ifelse() and %in% inside mutate() to change values other than the Likert responses to NA.\nIf you struggle to do this: practice writing ‘pseudocode’ here. That is, without knowing the right code, explain in precise logic what you want the computer to do. This can be converted to R more easily.\n\n\nCode\n# what values are present?\ndata_selfreport_trials %&gt;%\n  count(response)\n\n\n# A tibble: 8 × 2\n  response     n\n  &lt;chr&gt;    &lt;int&gt;\n1 1          193\n2 2           43\n3 3           26\n4 4           16\n5 5            7\n6 6            4\n7 7            3\n8 Ctrl+'B'     1\n\n\nCode\n# what type of data is the response column?\nclass(data_selfreport_trials$response)\n\n\n[1] \"character\"\n\n\nCode\n# remove non Likert values\ndata_selfreport_tidy &lt;- data_selfreport_trials %&gt;%\n  mutate(response = ifelse(response == \"Ctrl+'B'\", NA_integer_, response),\n         response = as.numeric(response))\n\n\n# show the data after changes\ndata_selfreport_tidy %&gt;%\n  count(response)\n\n\n# A tibble: 8 × 2\n  response     n\n     &lt;dbl&gt; &lt;int&gt;\n1        1   193\n2        2    43\n3        3    26\n4        4    16\n5        5     7\n6        6     4\n7        7     3\n8       NA     1\n\n\nCode\nclass(data_selfreport_tidy$response)\n\n\n[1] \"numeric\"\n\n\nWhat other ways are there of implementing this mutate, e.g., without using %in%? What are the pros and cons of each?\n\n\nCode\n# write examples here\n\n\n\n\n6.8.5 Practice mutate() & learn case_when()\ncase_when() allows you to compare multiple logical tests or if-else tests.\nThe AMP data needs to be reverse scored. Just like an item on a self-report that is worded negatively (e.g., most items: I am a good person; some items: I am a bad person), the negative prime trials have the opposite ‘accuracy’ values that they should. Use mutate() and case_when() to reverse score the negative prime trials, so that what was 0 is now 1 and what was 1 is now 0.\n\n\nCode\n# in your own time later, see if you can rewrite this yourself without looking at the answer to practice using case_when\ndata_amp_tidy &lt;- data_amp_test_trials_with_fast_trials %&gt;%\n  mutate(correct = case_when(trial_type == \"prime_positive\" ~ correct,\n                             trial_type == \"prime_negative\" & correct == 0 ~ 1,\n                             trial_type == \"prime_negative\" & correct == 1 ~ 0))\n\n# you can also specify a default value to return if none of the logical tests are passed with 'TRUE ~':\ndata_amp_tidy &lt;- data_amp_test_trials_with_fast_trials %&gt;%\n  mutate(correct = case_when(trial_type == \"prime_negative\" & correct == 0 ~ 1,\n                             trial_type == \"prime_negative\" & correct == 1 ~ 0,\n                             TRUE ~ correct))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#summarizing-across-rows",
    "href": "chapters/data_transformation.html#summarizing-across-rows",
    "title": "6  Data transformation",
    "section": "6.9 Summarizing across rows",
    "text": "6.9 Summarizing across rows\nIt is very common that we need to create summaries across rows. For example, to create the mean and standard deviation of a column like age. This can be done with summarize(). Remember: mutate() creates new columns or modifies the contents of existing columns, but does not change the number of rows. Whereas summarize() reduces a data frame down to one row.\n\n\nCode\n# mean\ndata_demographics_age_tidy %&gt;%\n  summarize(mean_age = mean(age, na.rm = TRUE))\n\n\n# A tibble: 1 × 1\n  mean_age\n     &lt;dbl&gt;\n1     35.7\n\n\nCode\n# SD\ndata_demographics_age_tidy %&gt;%\n  summarize(sd_age = sd(age, na.rm = TRUE))\n\n\n# A tibble: 1 × 1\n  sd_age\n   &lt;dbl&gt;\n1   12.4\n\n\nCode\n# mean and SD with rounding, illustrating how multiple summarizes can be done in one function call\ndata_demographics_age_tidy %&gt;%\n  summarize(mean_age = mean(age, na.rm = TRUE),\n            sd_age = sd(age, na.rm = TRUE)) |&gt;\n  mutate(mean_age = round_half_up(mean_age, digits = 2),\n         sd_age = round_half_up(sd_age, digits = 2))\n\n\n# A tibble: 1 × 2\n  mean_age sd_age\n     &lt;dbl&gt;  &lt;dbl&gt;\n1     35.7   12.4\n\n\n\n6.9.1 group_by()\nOften, we don’t want to reduce a data frame down to a single row / summarize the whole dataset, but instead we want to create a summary for each (sub)group. For example\n\n\nCode\n# # this code creates data needed for this example - you can simply load the data from disk and skip over this commented-out code. we will come back to things like 'joins' later\n# data_demographics_unique_participant_codes &lt;- data_demographics_trimmed %&gt;%\n#   count(unique_id) %&gt;%\n#   filter(n == 2)\n# \n# data_demographics_age_gender_tidy &lt;- data_demographics_trimmed %&gt;%\n#   semi_join(data_demographics_unique_participant_codes, by = \"unique_id\") %&gt;%\n#   pivot_wider(names_from = \"item\",\n#               values_from = \"response\") %&gt;%\n#   mutate(age = ifelse(age == \"old\", NA, age),\n#          age = as.numeric(age),\n#          gender = tolower(gender),\n#          gender = stringr::str_remove_all(gender, regex(\"\\\\W+\")), # regex is both very useful and awful to write\n#          gender = case_when(gender == \"female\" ~ gender,\n#                             gender == \"male\" ~ gender,\n#                             gender == \"nonbinary\" ~ gender,\n#                             gender == \"woman\" ~ \"female\",\n#                             gender == \"man\" ~ \"male\"))\n# \n# dir.create(\"../data/processed\")\n# write_csv(data_demographics_age_gender_tidy, \"../data/processed/data_demographics_age_gender_tidy.csv\")\n\n# load suitable example data from disk\ndata_demographics_age_gender_tidy &lt;-\n  read_csv(\"../data/processed/data_demographics_age_gender_tidy.csv\")\n\n\n# illustrate use of group_by() and summarize()\ndata_demographics_age_gender_tidy %&gt;%\n  summarize(mean_age = mean(age, na.rm = TRUE))\n\n\n# A tibble: 1 × 1\n  mean_age\n     &lt;dbl&gt;\n1     35.9\n\n\nCode\ndata_demographics_age_gender_tidy %&gt;%\n  group_by(gender) %&gt;%\n  summarize(mean_age = mean(age, na.rm = TRUE))\n\n\n# A tibble: 4 × 2\n  gender    mean_age\n  &lt;chr&gt;        &lt;dbl&gt;\n1 female        35.3\n2 male          37.3\n3 nonbinary     24.3\n4 &lt;NA&gt;          23  \n\n\n\n\n6.9.2 n()\nn() calculates the number of rows, i.e., the N. It can be useful in summarize.\n\n\nCode\n# summarize n\ndata_demographics_age_gender_tidy %&gt;%\n  summarize(n_age = n())\n\n\n# A tibble: 1 × 1\n  n_age\n  &lt;int&gt;\n1    98\n\n\nCode\n# summarize n per gender group\ndata_demographics_age_gender_tidy %&gt;%\n  group_by(gender) %&gt;%\n  summarize(n_age = n())\n\n\n# A tibble: 4 × 2\n  gender    n_age\n  &lt;chr&gt;     &lt;int&gt;\n1 female       40\n2 male         53\n3 nonbinary     3\n4 &lt;NA&gt;          2\n\n\nNote that count() is just the combination of group_by() and summiarize() and n()! they produce the same results as above.\n\n\nCode\n# summarize n\ndata_demographics_age_gender_tidy %&gt;%\n  count()\n\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    98\n\n\nCode\n# summarize n per gender group\ndata_demographics_age_gender_tidy %&gt;%\n  count(gender)\n\n\n# A tibble: 4 × 2\n  gender        n\n  &lt;chr&gt;     &lt;int&gt;\n1 female       40\n2 male         53\n3 nonbinary     3\n4 &lt;NA&gt;          2\n\n\n\n\n6.9.3 More complex summarizations\nLike mutate, the operation you do to summarize can also be more complex, such as finding the mean result of a logical test to calculate a proportion. For example, the proportion of participants who are less than 25 years old:\n\n\nCode\ndata_demographics_age_tidy %&gt;%\n  summarize(proportion_less_than_25 = mean(age &lt; 25, na.rm = TRUE)) %&gt;%\n  mutate(percent_less_than_25 = round_half_up(proportion_less_than_25 * 100, 1))\n\n\n# A tibble: 1 × 2\n  proportion_less_than_25 percent_less_than_25\n                    &lt;dbl&gt;                &lt;dbl&gt;\n1                   0.202                 20.2\n\n\nYou can also summarize (or indeed mutate) multiple columns in the same way using across(), for do-this-across-columns. We won’t cover how to use this here or all the variations that are possible, just know that it can be done. For example:\n\n\nCode\n# using the mtcars dataset that is built in to {dplyr}, ... \nmtcars %&gt;%\n  # ... calculate the mean of every numeric column in the dataset ...\n  summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;%\n  # ... and then round every column to one decimal place\n  mutate(across(everything(), round_half_up, digits = 1))\n\n\n   mpg cyl  disp    hp drat  wt qsec  vs  am gear carb\n1 20.1 6.2 230.7 146.7  3.6 3.2 17.8 0.4 0.4  3.7  2.8\n\n\n\n\n6.9.4 Realise that count() is just a wrapper function for summarize()\n\n\nCode\ndat &lt;- data.frame(x = c(\n  rnorm(n = 50),\n  rep(NA_integer_, 10)\n))\n\ndat |&gt;\n  mutate(x_is_na = is.na(x)) |&gt;\n  count(x_is_na)\n\n\n  x_is_na  n\n1   FALSE 50\n2    TRUE 10\n\n\nCode\ndat |&gt;\n  summarise(n_na = sum(is.na(x)))\n\n\n  n_na\n1   10\n\n\n\n\n6.9.5 Practice using summarize()\nCalculate the min, max, mean, and SD of all responses on the self report data.\n\n\nCode\ndata_selfreport_tidy %&gt;%\n  summarize(mean = mean(response, na.rm = TRUE),\n            sd = sd(response, na.rm = TRUE),\n            min = min(response, na.rm = TRUE),\n            max = max(response, na.rm = TRUE))\n\n\n# A tibble: 1 × 4\n   mean    sd   min   max\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  1.72  1.26     1     7\n\n\nCurrently each participant has up to three responses on the self-report scales (three item scale: like, positive, and prefer). Create a new dataframe containing each unique_id’s mean score across the items. Also calculate how many items each participant has data for, and whether they have complete data (i.e., data for three items).\n\n\nCode\ndata_selfreport_scored &lt;- data_selfreport_tidy %&gt;%\n  group_by(unique_id) %&gt;%\n  summarize(mean_self_report = mean(response),\n            n_self_report_items = n()) %&gt;%\n  mutate(self_report_complete = n_self_report_items == 3)\n\n\n# test &lt;- c(3, 5, 7, NA)\n# #test &lt;- c(3, 5, 7)\n# mean(test)\n# mean(test, na.rm = TRUE)\n# \n# dat |&gt;\n#   summarize(mean = mean(response, na.rm = TRUE))\n# \n# dat |&gt;\n#   filter(!is.na(response)) |&gt;\n#   summarize(mean = mean(response))\n# \n# mean_not_dumb &lt;- function(x){mean(x, na.rm = TRUE)}\n\n\nUsing only participants with complete, calculate the mean and SD of all participant’s mean scores on the self-reports.\n\n\nCode\n# data_selfreport_scored %&gt;%\n\n\nCreate a new data frame that calculates the proportion of prime-congruent trials for each participant on the AMP (i.e., the mean of the ‘correct’ column), their proportion of too-fast trials, and their number of trials.\nAlso add to that data frame a new column called “exclude_amp” and set it to “exclude” if more than 10% of a participant’s trials are too-fast trials and “include” if not.\n\n\nCode\n# data_amp_scored &lt;- data_amp_tidy %&gt;%\n\n\nCalculate the proportion of participants who are to be excluded.\n\n\nCode\n# data_amp_scored %&gt;%",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#check-your-learning-1",
    "href": "chapters/data_transformation.html#check-your-learning-1",
    "title": "6  Data transformation",
    "section": "6.10 Check your learning",
    "text": "6.10 Check your learning\nWhat is the difference between mutate() and summarize()? If I use the wrong one, will I get the same answer? E.g., mutate(mean_age = mean(age, na.rm = TRUE)) vs. summarize(mean_age = mean(age, na.rm = TRUE))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/data_transformation.html#writing-data-to-disk",
    "href": "chapters/data_transformation.html#writing-data-to-disk",
    "title": "6  Data transformation",
    "section": "6.11 Writing data to disk",
    "text": "6.11 Writing data to disk\n\n\nCode\n# write_csv(data_processed, \"../data/processed/data_processed.csv\")",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data transformation</span>"
    ]
  },
  {
    "objectID": "chapters/reshaping_and_pivots.html",
    "href": "chapters/reshaping_and_pivots.html",
    "title": "7  Reshaping and pivots",
    "section": "",
    "text": "7.1 Resources\nSee code and gifs here which illustrate pivots (and indeed other tidyverse verbs).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reshaping and pivots</span>"
    ]
  },
  {
    "objectID": "chapters/reshaping_and_pivots.html#dependencies",
    "href": "chapters/reshaping_and_pivots.html#dependencies",
    "title": "7  Reshaping and pivots",
    "section": "7.2 Dependencies",
    "text": "7.2 Dependencies\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tibble)\n#install.packages(\"devtools\")\n#devtools::install_github(\"debruine/faux\")\nlibrary(faux)\nlibrary(janitor)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(psych)\nlibrary(readr)\nlibrary(knitr)\nlibrary(kableExtra)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reshaping and pivots</span>"
    ]
  },
  {
    "objectID": "chapters/reshaping_and_pivots.html#example",
    "href": "chapters/reshaping_and_pivots.html#example",
    "title": "7  Reshaping and pivots",
    "section": "7.3 Example",
    "text": "7.3 Example\n\n7.3.1 Simulate data in wide format\n\n\nCode\n# set seed for reproducibility\nset.seed(123)\n\n# generate data \ndata_wide &lt;- \n  faux::rnorm_multi(n = 100,\n                    vars = 5,\n                    mu = 3,\n                    sd = 1,\n                    r = 0.5,\n                    varnames = paste0(\"item_\", 1:5),\n                    empirical = FALSE) %&gt;%\n  rownames_to_column(var = \"id\")\n\n# recode responses less than 1 or more than 5 to those values, then round scores to whole numbers\n# note that {faux} has functions for doing this better\n\n\n# dat &lt;- data_wide |&gt;\n#   mutate(item_1 = round_half_up(item_1, digits = 0),\n#          item_1 = ifewlse\n\ndata_wide_likert &lt;- data_wide %&gt;%\n  mutate(across(starts_with(\"item_\"), ~ round_half_up(.x, digits = 0))) %&gt;%\n  mutate(across(starts_with(\"item_\"), ~ ifelse(.x &lt; 1, 1, ifelse(.x &gt; 5, 5, .x))))\n\n\n\n\n7.3.2 Cronbach’s alpha\nWide data like this is a) common and b) useful for calculating metrics like internal consistency.\n\n\nCode\nres_alpha &lt;- data_wide_likert %&gt;%\n  #select(-id) %&gt;%\n  select(starts_with(\"item_\")) %&gt;%\n  psych::alpha()\n\ncronbachs_alpha_estimate &lt;- res_alpha$total$raw_alpha |&gt;\n  round_half_up(digits = 2)\n\n\nCronbach’s \\(\\alpha\\) = 0.79\n\n\n7.3.3 Plot simulated data\n\n\nCode\nggplot(data_wide_likert, aes(x = item_1)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data_wide_likert, aes(x = item_2)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data_wide_likert, aes(x = item_3)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data_wide_likert, aes(x = item_4)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data_wide_likert, aes(x = item_5)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\n\nThese plots repeat the mortal coding sin of repeating ourselves. If we reshaped the data to ‘long’ format we could use just one ggplot() call that includes facet_wrap().\n\n\n\n7.3.4 Reshape\nUsing pivot_longer().\n\n\nCode\n# positive selection\ndata_long &lt;- data_wide_likert %&gt;%\n  pivot_longer(cols = starts_with(\"item_\"),\n               names_to = \"item\",\n               values_to = \"response\")\n\n# positive selection using a different tidy select function\ndata_long &lt;- data_wide_likert %&gt;%\n  pivot_longer(cols = contains(\"item_\"),\n               names_to = \"item\",\n               values_to = \"response\")\n\n# negative selection\ndata_long &lt;- data_wide_likert %&gt;%\n  pivot_longer(cols = -id,\n               names_to = \"item\",\n               values_to = \"response\") |&gt;\n  mutate(item = stringr::str_remove(item, \"item_\"))\n\nggplot(data_long, aes(x = response)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw() +\n  facet_wrap(~ item)\n\n\n\n\n\n\n\n\n\n\nWhat other ways could you specify this pivot_longer call’s arguments?\nfacet_wrap() is to {ggplot} as group_by() is to {dplyr}\n\n\n7.3.4.1 Calculate sum scores\n\n\nCode\ntemp &lt;- data_wide_likert |&gt;\n  group_by(id) |&gt;\n  mutate(sum_score = item_1 + item_2 + item_3 + item_4 + item_5)\n  #mutate(sum_score = rowSums(item_1, item_2, item_3, item_4, item_5))\n\n\n\nrow math is much faster than column math in R!\n\n\n\nCode\nsum_scores &lt;- data_long %&gt;%\n  group_by(id) %&gt;%\n  summarise(sum_score = sum(response))\n\n\nggplot(sum_scores, aes(x = sum_score)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  scale_x_continuous(breaks = breaks_pretty(n = 10)) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n\n7.3.5 Convert this long data back to wide\nJust to know how to do it.\n\n\nCode\ndata_wide_again &lt;- data_long %&gt;%\n  pivot_wider(names_from = item,\n              values_from = response,\n              names_prefix = \"item_\")\n\n\n\n\n7.3.6 Combine item and sum scores in one data frame\n\n\nCode\ndata_item_and_sum_scores &lt;- data_wide_again %&gt;%\n  left_join(sum_scores, by = \"id\")\n\n# why joins are needed over bind_cols \n# wrong &lt;- bind_cols(data_wide_again, sum_scores |&gt; select(-id))",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reshaping and pivots</span>"
    ]
  },
  {
    "objectID": "chapters/reshaping_and_pivots.html#new-facet-plot-with-items-and-sum-score",
    "href": "chapters/reshaping_and_pivots.html#new-facet-plot-with-items-and-sum-score",
    "title": "7  Reshaping and pivots",
    "section": "7.4 New facet plot with items and sum score",
    "text": "7.4 New facet plot with items and sum score\n\n\nCode\ndata_long_with_sum_score &lt;- data_item_and_sum_scores %&gt;%\n  pivot_longer(cols = -id,\n               names_to = \"item\",\n               values_to = \"response\")\n\nggplot(data_long_with_sum_score, aes(x = response)) +\n  geom_histogram(binwidth = 1, boundary = -0.5) +\n  theme_linedraw() +\n  facet_wrap(~ item, scales = \"free\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reshaping and pivots</span>"
    ]
  },
  {
    "objectID": "chapters/reshaping_and_pivots.html#practice",
    "href": "chapters/reshaping_and_pivots.html#practice",
    "title": "7  Reshaping and pivots",
    "section": "7.5 Practice",
    "text": "7.5 Practice\nWrangle the demographics data included in this exercise more efficiently by reshaping it into wide format. Before, we used filter() to wrangle the age and gender data separately.\n\n\nCode\ndat &lt;- read_csv(\"../data/raw/data_demographics_raw.csv\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Reshaping and pivots</span>"
    ]
  },
  {
    "objectID": "chapters/joins.html",
    "href": "chapters/joins.html",
    "title": "8  Joins",
    "section": "",
    "text": "8.1 Dependencies\nCode\nlibrary(dplyr)\nlibrary(readr)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "chapters/joins.html#get-data",
    "href": "chapters/joins.html#get-data",
    "title": "8  Joins",
    "section": "8.2 Get data",
    "text": "8.2 Get data\n\n\nCode\ndata_unique_id_subset &lt;- read_csv(\"../data/raw/data_unique_id_subset.csv\")\ndata_age_gender_subset &lt;- read_csv(\"../data/raw/data_age_gender_subset.csv\")\ndata_amp_summary_subset &lt;- read_csv(\"../data/raw/data_amp_summary_subset.csv\")\ndata_selfreport_summary_subset &lt;- read_csv(\"../data/raw/data_selfreport_summary_subset.csv\")\n\nnrow(data_unique_id_subset)\n\n\n[1] 92\n\n\nCode\nnrow(data_age_gender_subset)\n\n\n[1] 90\n\n\nCode\nnrow(data_amp_summary_subset)\n\n\n[1] 31\n\n\nCode\nnrow(data_selfreport_summary_subset)\n\n\n[1] 76",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "chapters/joins.html#practicing-joins",
    "href": "chapters/joins.html#practicing-joins",
    "title": "8  Joins",
    "section": "8.3 Practicing joins",
    "text": "8.3 Practicing joins\nUsing the data frames below and functions from the _join family, write code to do the following joins.\n\n8.3.1 Practice 1\ncreate ‘data_combined’ by joining data_amp_summary_subset and data_age_gender_subset so that unique_ids in either data frame are retained. which join is this? implement it.\n\n\nCode\n# data_combined &lt;- \n\n\n\n\n8.3.2 Practice 2\ncreate ‘data_self_reports_and_their_amp_data’ by joining data_selfreport_summary_subset and data_amp_summary_subset so that all participants have self-report data, + AMP data if available. which join is this? implement it.\n\n\nCode\n# data_self_reports_and_their_amp_data &lt;- \n\n\n\n\n8.3.3 Practice 3\ndo the opposite: create ‘data_amp_data_and_their_self_reports’ by joining data_amp_summary_subset and data_selfreport_summary_subset so that all participants have AMP data, + self-report data if available. which join is this? implement it.\n\n\nCode\n# data_amp_data_and_their_self_reports &lt;- \n\n\n\n\n8.3.4 Practice 4\ncreate data_combined_2 by joining ‘data_combined’ and data_selfreport_summary_subset only unique_ids already present in data_combined are retained. which join is this? implement it.\n\n\nCode\n# data_combined_2 &lt;- \n\n\n\n\n8.3.5 Practice 5\ncreate ‘data_missing_ids’ which should list the unique_ids are missing from data_unique_id_subset but are present in at least one of data_age_gender_subset, data_amp_summary_subset, and data_selfreport_summary_subset. This will require two different joins. Which? Implement them.\n\n\nCode\n# data_missing_ids &lt;-",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Joins</span>"
    ]
  },
  {
    "objectID": "chapters/reporting.html",
    "href": "chapters/reporting.html",
    "title": "9  Reporting",
    "section": "",
    "text": "9.1 Dependencies\nCode\nlibrary(dplyr)\nlibrary(readr)\nlibrary(report) # part of {easystats}\nlibrary(see) # part of {easystats}\nlibrary(parameters) # part of {easystats}\nlibrary(correlation) # part of {easystats}\nlibrary(effectsize) # part of {easystats}\nlibrary(performance) # part of {easystats}\nlibrary(janitor)\nlibrary(lme4)\nlibrary(knitr)\nlibrary(kableExtra)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reporting</span>"
    ]
  },
  {
    "objectID": "chapters/reporting.html#inference-tests",
    "href": "chapters/reporting.html#inference-tests",
    "title": "9  Reporting",
    "section": "9.2 Inference tests",
    "text": "9.2 Inference tests\n\n9.2.1 Regressions\n\n\nCode\n# fit model\nmodel &lt;- lm(wt ~ 1 + am + mpg, data = mtcars)\n\n# report - text output (nb omits intercept!)\nreport(model)\n\n\nWe fitted a linear model (estimated using OLS) to predict wt with am and mpg\n(formula: wt ~ 1 + am + mpg). The model explains a statistically significant\nand substantial proportion of variance (R2 = 0.80, F(2, 29) = 57.66, p &lt; .001,\nadj. R2 = 0.79). The model's intercept, corresponding to am = 0 and mpg = 0, is\nat 5.74 (95% CI [5.11, 6.36], t(29) = 18.64, p &lt; .001). Within this model:\n\n  - The effect of am is statistically significant and negative (beta = -0.53, 95%\nCI [-0.94, -0.11], t(29) = -2.58, p = 0.015; Std. beta = -0.27, 95% CI [-0.48,\n-0.06])\n  - The effect of mpg is statistically significant and negative (beta = -0.11,\n95% CI [-0.15, -0.08], t(29) = -6.79, p &lt; .001; Std. beta = -0.71, 95% CI\n[-0.92, -0.49])\n\nStandardized parameters were obtained by fitting the model on a standardized\nversion of the dataset. 95% Confidence Intervals (CIs) and p-values were\ncomputed using a Wald t-distribution approximation.\n\n\nCode\n# each parameter (including intercept)\nreport_parameters(model)\n\n\n  - The intercept is statistically significant and positive (beta = 5.74, 95% CI [5.11, 6.36], t(29) = 18.64, p &lt; .001; Std. beta = 1.10e-16, 95% CI [-0.17, 0.17])\n  - The effect of am is statistically significant and negative (beta = -0.53, 95% CI [-0.94, -0.11], t(29) = -2.58, p = 0.015; Std. beta = -0.27, 95% CI [-0.48, -0.06])\n  - The effect of mpg is statistically significant and negative (beta = -0.11, 95% CI [-0.15, -0.08], t(29) = -6.79, p &lt; .001; Std. beta = -0.71, 95% CI [-0.92, -0.49])\n\n\nCode\n# just parameters in text format\nreport_statistics(model)\n\n\nbeta = 5.74, 95% CI [5.11, 6.36], t(29) = 18.64, p &lt; .001; Std. beta = 1.10e-16, 95% CI [-0.17, 0.17]\nbeta = -0.53, 95% CI [-0.94, -0.11], t(29) = -2.58, p = 0.015; Std. beta = -0.27, 95% CI [-0.48, -0.06]\nbeta = -0.11, 95% CI [-0.15, -0.08], t(29) = -6.79, p &lt; .001; Std. beta = -0.71, 95% CI [-0.92, -0.49]\n\n\nCode\n# just parameters in table format\nparameters(model)\n\n\nParameter   | Coefficient |   SE |         95% CI | t(29) |      p\n------------------------------------------------------------------\n(Intercept) |        5.74 | 0.31 | [ 5.11,  6.36] | 18.64 | &lt; .001\nam          |       -0.53 | 0.20 | [-0.94, -0.11] | -2.58 | 0.015 \nmpg         |       -0.11 | 0.02 | [-0.15, -0.08] | -6.79 | &lt; .001\n\n\nCode\n# just parameters in table html format \nparameters(model) |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\nParameter\nCoefficient\nSE\nCI\nCI_low\nCI_high\nt\ndf_error\np\n\n\n\n\n(Intercept)\n5.74\n0.31\n0.95\n5.11\n6.36\n18.64\n29\np &lt; .001\n\n\nam\n-0.53\n0.20\n0.95\n-0.94\n-0.11\n-2.58\n29\np = 0.015\n\n\nmpg\n-0.11\n0.02\n0.95\n-0.15\n-0.08\n-6.79\n29\np &lt; .001\n\n\n\n\n\n\n\nCode\n# what if i just want some of these cols?\nparameters(model) |&gt;\n  as.data.frame() |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  select(r = Coefficient, ci_lower = CI_low, ci_upper = CI_high, p) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2)\n\n\n      r ci_lower ci_upper         p\n1  5.74     5.11     6.36  p &lt; .001\n2 -0.53    -0.94    -0.11 p = 0.015\n3 -0.11    -0.15    -0.08  p &lt; .001\n\n\nCode\n# table in markdown format\nreport_table(model)\n\n\nParameter   | Coefficient |         95% CI | t(29) |      p | Std. Coef.\n------------------------------------------------------------------------\n(Intercept) |        5.74 | [ 5.11,  6.36] | 18.64 | &lt; .001 |   1.10e-16\nam          |       -0.53 | [-0.94, -0.11] | -2.58 | 0.015  |      -0.27\nmpg         |       -0.11 | [-0.15, -0.08] | -6.79 | &lt; .001 |      -0.71\n            |             |                |       |        |           \nAIC         |             |                |       |        |           \nAICc        |             |                |       |        |           \nBIC         |             |                |       |        |           \nR2          |             |                |       |        |           \nR2 (adj.)   |             |                |       |        |           \nSigma       |             |                |       |        |           \n\nParameter   | Std. Coef. 95% CI |   Fit\n---------------------------------------\n(Intercept) |    [-0.17,  0.17] |      \nam          |    [-0.48, -0.06] |      \nmpg         |    [-0.92, -0.49] |      \n            |                   |      \nAIC         |                   | 45.05\nAICc        |                   | 46.53\nBIC         |                   | 50.91\nR2          |                   |  0.80\nR2 (adj.)   |                   |  0.79\nSigma       |                   |  0.45\n\n\nCode\n# table in html format - needs to be rounded manually\nreport_table(model) |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\n\nParameter\nCoefficient\nCI\nCI_low\nCI_high\nt\ndf_error\np\nStd_Coefficient\nStd_Coefficient_CI_low\nStd_Coefficient_CI_high\nFit\n\n\n\n\n1\n(Intercept)\n5.74\n0.95\n5.11\n6.36\n18.64\n29\np &lt; .001\n0.00\n-0.17\n0.17\nNA\n\n\n2\nam\n-0.53\n0.95\n-0.94\n-0.11\n-2.58\n29\np = 0.015\n-0.27\n-0.48\n-0.06\nNA\n\n\n3\nmpg\n-0.11\n0.95\n-0.15\n-0.08\n-6.79\n29\np &lt; .001\n-0.71\n-0.92\n-0.49\nNA\n\n\n4\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\n\n\n5\nAIC\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\n45.05\n\n\n6\nAICc\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\n46.53\n\n\n7\nBIC\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\n50.91\n\n\n8\nR2\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\n0.80\n\n\n9\nR2 (adj.)\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\n0.79\n\n\n11\nSigma\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\n0.45\n\n\n\n\n\n\n\nCode\n# plot\nparameters(model) |&gt;\n  plot() \n\n\n\n\n\n\n\n\n\n\n\n9.2.2 Correlations\n\n9.2.2.1 Single correlation tests\n\n\nCode\n# fit model\nmodel &lt;- cor.test(mtcars$mpg, mtcars$wt)\n\n# report - text output \nreport(model)\n\n\nEffect sizes were labelled following Funder's (2019) recommendations.\n\nThe Pearson's product-moment correlation between mtcars$mpg and mtcars$wt is\nnegative, statistically significant, and very large (r = -0.87, 95% CI [-0.93,\n-0.74], t(30) = -9.56, p &lt; .001)\n\n\nCode\n# table in html format - needs to be rounded manually\nreport_table(model) |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\nParameter1\nParameter2\nr\nCI\nCI_low\nCI_high\nt\ndf_error\np\nMethod\nAlternative\n\n\n\n\nmtcars$mpg\nmtcars$wt\n-0.87\n0.95\n-0.93\n-0.74\n-9.56\n30\np &lt; .001\nPearson's product-moment correlation\ntwo.sided\n\n\n\n\n\n\n\n\n\n9.2.2.2 Many\n\n\nCode\nresults &lt;- correlation(iris)\n\nresults\n\n\n# Correlation Matrix (pearson-method)\n\nParameter1   |   Parameter2 |     r |         95% CI | t(148) |         p\n-------------------------------------------------------------------------\nSepal.Length |  Sepal.Width | -0.12 | [-0.27,  0.04] |  -1.44 | 0.152    \nSepal.Length | Petal.Length |  0.87 | [ 0.83,  0.91] |  21.65 | &lt; .001***\nSepal.Length |  Petal.Width |  0.82 | [ 0.76,  0.86] |  17.30 | &lt; .001***\nSepal.Width  | Petal.Length | -0.43 | [-0.55, -0.29] |  -5.77 | &lt; .001***\nSepal.Width  |  Petal.Width | -0.37 | [-0.50, -0.22] |  -4.79 | &lt; .001***\nPetal.Length |  Petal.Width |  0.96 | [ 0.95,  0.97] |  43.39 | &lt; .001***\n\np-value adjustment method: Holm (1979)\nObservations: 150\n\n\nCode\nresults %&gt;%\n  summary(redundant = TRUE) %&gt;%\n  plot()\n\n\n\n\n\n\n\n\n\n\n\n9.2.2.3 By group\n\n\nCode\niris %&gt;%\n  select(Species, Sepal.Length, Sepal.Width, Petal.Width) %&gt;%\n  group_by(Species) %&gt;%\n  correlation()\n\n\n# Correlation Matrix (pearson-method)\n\nGroup      |   Parameter1 |  Parameter2 |    r |        95% CI | t(48) |         p\n----------------------------------------------------------------------------------\nsetosa     | Sepal.Length | Sepal.Width | 0.74 | [ 0.59, 0.85] |  7.68 | &lt; .001***\nsetosa     | Sepal.Length | Petal.Width | 0.28 | [ 0.00, 0.52] |  2.01 | 0.101    \nsetosa     |  Sepal.Width | Petal.Width | 0.23 | [-0.05, 0.48] |  1.66 | 0.104    \nversicolor | Sepal.Length | Sepal.Width | 0.53 | [ 0.29, 0.70] |  4.28 | &lt; .001***\nversicolor | Sepal.Length | Petal.Width | 0.55 | [ 0.32, 0.72] |  4.52 | &lt; .001***\nversicolor |  Sepal.Width | Petal.Width | 0.66 | [ 0.47, 0.80] |  6.15 | &lt; .001***\nvirginica  | Sepal.Length | Sepal.Width | 0.46 | [ 0.20, 0.65] |  3.56 | 0.002**  \nvirginica  | Sepal.Length | Petal.Width | 0.28 | [ 0.00, 0.52] |  2.03 | 0.048*   \nvirginica  |  Sepal.Width | Petal.Width | 0.54 | [ 0.31, 0.71] |  4.42 | &lt; .001***\n\np-value adjustment method: Holm (1979)\nObservations: 50\n\n\n\n\n\n9.2.3 t-tests\nNB Cohen’s d is approximated - better to calculate it separately and accurately.\n\n\nCode\n# fit model\nmodel &lt;- t.test(mpg ~ am, data = mtcars)\n\n# report - text output \nreport(model)\n\n\nEffect sizes were labelled following Cohen's (1988) recommendations.\n\nThe Welch Two Sample t-test testing the difference of mpg by am (mean in group\n0 = 17.15, mean in group 1 = 24.39) suggests that the effect is negative,\nstatistically significant, and large (difference = -7.24, 95% CI [-11.28,\n-3.21], t(18.33) = -3.77, p = 0.001; Cohen's d = -1.76, 95% CI [-2.82, -0.67])\n\n\nCode\n# table in html format - needs to be rounded manually\nreport_table(model) |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\nParameter\nGroup\nMean_Group1\nMean_Group2\nDifference\nCI\nCI_low\nCI_high\nt\ndf_error\np\nMethod\nAlternative\nd\nd_CI_low\nd_CI_high\n\n\n\n\nmpg\nam\n17.15\n24.39\n-7.24\n0.95\n-11.28\n-3.21\n-3.77\n18.33\np = 0.001\nWelch Two Sample t-test\ntwo.sided\n-1.76\n-2.82\n-0.67\n\n\n\n\n\n\n\nCode\n# estimate Cohen's d directly from data\ncohens_d(mpg ~ am, data = mtcars)\n\n\nCohen's d |         95% CI\n--------------------------\n-1.48     | [-2.27, -0.67]\n\n- Estimated using pooled SD.\n\n\n\n\n9.2.4 Multilevel/hierarchical/mixed models\n\n\nCode\n# fit model\nmodel &lt;- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)\n\n# parameters in text format \nreport(model)\n\n\nWe fitted a linear mixed model (estimated using REML and nloptwrap optimizer)\nto predict Reaction with Days (formula: Reaction ~ Days). The model included\nDays as random effects (formula: ~Days | Subject). The model's total\nexplanatory power is substantial (conditional R2 = 0.80) and the part related\nto the fixed effects alone (marginal R2) is of 0.28. The model's intercept,\ncorresponding to Days = 0, is at 251.41 (95% CI [237.94, 264.87], t(174) =\n36.84, p &lt; .001). Within this model:\n\n  - The effect of Days is statistically significant and positive (beta = 10.47,\n95% CI [7.42, 13.52], t(174) = 6.77, p &lt; .001; Std. beta = 0.54, 95% CI [0.38,\n0.69])\n\nStandardized parameters were obtained by fitting the model on a standardized\nversion of the dataset. 95% Confidence Intervals (CIs) and p-values were\ncomputed using a Wald t-distribution approximation.\n\n\nCode\n# parameters in table format\nparameters(model) |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\nParameter\nCoefficient\nSE\nCI\nCI_low\nCI_high\nt\ndf_error\np\nEffects\nGroup\n\n\n\n\n(Intercept)\n251.41\n6.82\n0.95\n237.94\n264.87\n36.84\n174\np &lt; .001\nfixed\n\n\n\nDays\n10.47\n1.55\n0.95\n7.42\n13.52\n6.77\n174\np &lt; .001\nfixed\n\n\n\nSD (Intercept)\n24.74\nNA\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nSubject\n\n\nSD (Days)\n5.92\nNA\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nSubject\n\n\nCor (Intercept~Days)\n0.07\nNA\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nSubject\n\n\nSD (Observations)\n25.59\nNA\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nResidual\n\n\n\n\n\n\n\nCode\n# table in html format - needs to be rounded manually\nreport_table(model) |&gt;\n  mutate(p = insight::format_p(p)) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\n\nParameter\nCoefficient\nCI\nCI_low\nCI_high\nt\ndf_error\np\nEffects\nGroup\nStd_Coefficient\nStd_Coefficient_CI_low\nStd_Coefficient_CI_high\nFit\n\n\n\n\n1\n(Intercept)\n251.41\n0.95\n237.94\n264.87\n36.84\n174\np &lt; .001\nfixed\n\n0.00\n-0.32\n0.32\nNA\n\n\n2\nDays\n10.47\n0.95\n7.42\n13.52\n6.77\n174\np &lt; .001\nfixed\n\n0.54\n0.38\n0.69\nNA\n\n\n3\nNA\n24.74\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nSubject\nNA\nNA\nNA\nNA\n\n\n4\nNA\n5.92\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nSubject\nNA\nNA\nNA\nNA\n\n\n5\nNA\n0.07\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nSubject\nNA\nNA\nNA\nNA\n\n\n6\nNA\n25.59\n0.95\nNA\nNA\nNA\nNA\n\nrandom\nResidual\nNA\nNA\nNA\nNA\n\n\n7\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n8\nAIC\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\n1755.63\n\n\n9\nAICc\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\n1756.11\n\n\n10\nBIC\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\n1774.79\n\n\n11\nR2 (conditional)\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\n0.80\n\n\n12\nR2 (marginal)\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\n0.28\n\n\n15\nSigma\nNA\nNA\nNA\nNA\nNA\nNA\n\nNA\nNA\nNA\nNA\nNA\n25.59\n\n\n\n\n\n\n\nCode\n# plot\nparameters(model) |&gt;\n  plot() \n\n\n\n\n\n\n\n\n\nCode\n# check assumptions of random effects\nresult &lt;- check_normality(model, effects = \"random\")\nplot(result)\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n\n9.2.5 ANOVAs\n\n\nCode\n# fit model\nmodel &lt;- aov(mpg ~ factor(gear) + factor(carb), data = mtcars)\n\n# commonly used effect size: partial eta squared\neta_squared(model)\n\n\n# Effect Size for ANOVA (Type I)\n\nParameter    | Eta2 (partial) |       95% CI\n--------------------------------------------\nfactor(gear) |           0.69 | [0.49, 1.00]\nfactor(carb) |           0.66 | [0.41, 1.00]\n\n- One-sided CIs: upper bound fixed at [1.00].\n\n\nCode\n# better effect size: partialomega squared\nomega_squared(model)\n\n\n# Effect Size for ANOVA (Type I)\n\nParameter    | Omega2 (partial) |       95% CI\n----------------------------------------------\nfactor(gear) |             0.62 | [0.38, 1.00]\nfactor(carb) |             0.57 | [0.26, 1.00]\n\n- One-sided CIs: upper bound fixed at [1.00].",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reporting</span>"
    ]
  },
  {
    "objectID": "chapters/reporting.html#summary-statistics",
    "href": "chapters/reporting.html#summary-statistics",
    "title": "9  Reporting",
    "section": "9.3 Summary statistics",
    "text": "9.3 Summary statistics\n\n\nCode\n# all columns\niris |&gt;\n  group_by(Species) |&gt;\n  report_table() \n\n\nGroup      |     Variable | n_Obs | Mean |   SD | Median |  MAD |  Min |  Max\n-----------------------------------------------------------------------------\nsetosa     | Sepal.Length |    50 | 5.01 | 0.35 |   5.00 | 0.30 | 4.30 | 5.80\nsetosa     |  Sepal.Width |    50 | 3.43 | 0.38 |   3.40 | 0.37 | 2.30 | 4.40\nsetosa     | Petal.Length |    50 | 1.46 | 0.17 |   1.50 | 0.15 | 1.00 | 1.90\nsetosa     |  Petal.Width |    50 | 0.25 | 0.11 |   0.20 | 0.00 | 0.10 | 0.60\nversicolor | Sepal.Length |    50 | 5.94 | 0.52 |   5.90 | 0.52 | 4.90 | 7.00\nversicolor |  Sepal.Width |    50 | 2.77 | 0.31 |   2.80 | 0.30 | 2.00 | 3.40\nversicolor | Petal.Length |    50 | 4.26 | 0.47 |   4.35 | 0.52 | 3.00 | 5.10\nversicolor |  Petal.Width |    50 | 1.33 | 0.20 |   1.30 | 0.22 | 1.00 | 1.80\nvirginica  | Sepal.Length |    50 | 6.59 | 0.64 |   6.50 | 0.59 | 4.90 | 7.90\nvirginica  |  Sepal.Width |    50 | 2.97 | 0.32 |   3.00 | 0.30 | 2.20 | 3.80\nvirginica  | Petal.Length |    50 | 5.55 | 0.55 |   5.55 | 0.67 | 4.50 | 6.90\nvirginica  |  Petal.Width |    50 | 2.03 | 0.27 |   2.00 | 0.30 | 1.40 | 2.50\n\nGroup      | Skewness | Kurtosis | n_Missing\n--------------------------------------------\nsetosa     |     0.12 |    -0.25 |         0\nsetosa     |     0.04 |     0.95 |         0\nsetosa     |     0.11 |     1.02 |         0\nsetosa     |     1.25 |     1.72 |         0\nversicolor |     0.11 |    -0.53 |         0\nversicolor |    -0.36 |    -0.37 |         0\nversicolor |    -0.61 |     0.05 |         0\nversicolor |    -0.03 |    -0.41 |         0\nvirginica  |     0.12 |     0.03 |         0\nvirginica  |     0.37 |     0.71 |         0\nvirginica  |     0.55 |    -0.15 |         0\nvirginica  |    -0.13 |    -0.60 |         0\n\n\nCode\n# all columns - html output with rounding\niris |&gt;\n  group_by(Species) |&gt;\n  report_table() |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\nGroup\nVariable\nn_Obs\nMean\nSD\nMedian\nMAD\nMin\nMax\nSkewness\nKurtosis\nn_Missing\n\n\n\n\nsetosa\nSepal.Length\n50\n5.01\n0.35\n5.00\n0.30\n4.3\n5.8\n0.12\n-0.25\n0\n\n\nsetosa\nSepal.Width\n50\n3.43\n0.38\n3.40\n0.37\n2.3\n4.4\n0.04\n0.95\n0\n\n\nsetosa\nPetal.Length\n50\n1.46\n0.17\n1.50\n0.15\n1.0\n1.9\n0.11\n1.02\n0\n\n\nsetosa\nPetal.Width\n50\n0.25\n0.11\n0.20\n0.00\n0.1\n0.6\n1.25\n1.72\n0\n\n\nversicolor\nSepal.Length\n50\n5.94\n0.52\n5.90\n0.52\n4.9\n7.0\n0.11\n-0.53\n0\n\n\nversicolor\nSepal.Width\n50\n2.77\n0.31\n2.80\n0.30\n2.0\n3.4\n-0.36\n-0.37\n0\n\n\nversicolor\nPetal.Length\n50\n4.26\n0.47\n4.35\n0.52\n3.0\n5.1\n-0.61\n0.05\n0\n\n\nversicolor\nPetal.Width\n50\n1.33\n0.20\n1.30\n0.22\n1.0\n1.8\n-0.03\n-0.41\n0\n\n\nvirginica\nSepal.Length\n50\n6.59\n0.64\n6.50\n0.59\n4.9\n7.9\n0.12\n0.03\n0\n\n\nvirginica\nSepal.Width\n50\n2.97\n0.32\n3.00\n0.30\n2.2\n3.8\n0.37\n0.71\n0\n\n\nvirginica\nPetal.Length\n50\n5.55\n0.55\n5.55\n0.67\n4.5\n6.9\n0.55\n-0.15\n0\n\n\nvirginica\nPetal.Width\n50\n2.03\n0.27\n2.00\n0.30\n1.4\n2.5\n-0.13\n-0.60\n0\n\n\n\n\n\n\n\nCode\n# subset of columns\niris |&gt;\n  group_by(Species) |&gt;\n  report_table() |&gt;\n  select(Group, Variable, n_Obs, Mean, SD) |&gt;\n  mutate_if(is.numeric, round_half_up, digits = 2) |&gt;\n  kable() |&gt;\n  kable_classic(full_width = FALSE)\n\n\n\n\n\nGroup\nVariable\nn_Obs\nMean\nSD\n\n\n\n\nsetosa\nSepal.Length\n50\n5.01\n0.35\n\n\nsetosa\nSepal.Width\n50\n3.43\n0.38\n\n\nsetosa\nPetal.Length\n50\n1.46\n0.17\n\n\nsetosa\nPetal.Width\n50\n0.25\n0.11\n\n\nversicolor\nSepal.Length\n50\n5.94\n0.52\n\n\nversicolor\nSepal.Width\n50\n2.77\n0.31\n\n\nversicolor\nPetal.Length\n50\n4.26\n0.47\n\n\nversicolor\nPetal.Width\n50\n1.33\n0.20\n\n\nvirginica\nSepal.Length\n50\n6.59\n0.64\n\n\nvirginica\nSepal.Width\n50\n2.97\n0.32\n\n\nvirginica\nPetal.Length\n50\n5.55\n0.55\n\n\nvirginica\nPetal.Width\n50\n2.03\n0.27",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reporting</span>"
    ]
  },
  {
    "objectID": "chapters/reporting.html#assumption-checks",
    "href": "chapters/reporting.html#assumption-checks",
    "title": "9  Reporting",
    "section": "9.4 Assumption checks",
    "text": "9.4 Assumption checks\nBeware that checking assumptions can lead to as many bad practices as it does good ones! (e.g., poorly justified post hoc outlier exclusion)\n\n9.4.1 Multiple checks at once\n\n\nCode\n# fit model\nmodel &lt;- lm(wt ~ 1 + am + mpg, data = mtcars)\n\n# check multiple model assumptions\ncheck_model(model)\n\n\n\n\n\n\n\n\n\n\n\n9.4.2 Normality of distribution of residuals\n\n\nCode\nres_normality &lt;- check_normality(model)\n\nres_normality\n\n\nWarning: Non-normality of residuals detected (p = 0.013).\n\n\nCode\nplot(res_normality, type = \"qq\")\n\n\n\n\n\n\n\n\n\nCode\nplot(res_normality, type = \"density\")\n\n\n\n\n\n\n\n\n\n\n\n9.4.3 Multicolinearity\n\n\nCode\nres_collinearity &lt;- check_collinearity(model)\n\nres_collinearity\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n   am 1.56 [1.19, 2.68]         1.25      0.64     [0.37, 0.84]\n  mpg 1.56 [1.19, 2.68]         1.25      0.64     [0.37, 0.84]\n\n\nCode\nplot(res_collinearity)\n\n\n\n\n\n\n\n\n\n\n\n9.4.4 Outliers\n\n\nCode\nres_outliers &lt;- check_outliers(model, method = \"cook\") # \"all\" requires other dependencies and can take some time to run  \n#res_outliers &lt;- check_outliers(model, method = \"all\") # \"all\" requires other dependencies and can take some time to run  \n\nres_outliers\n\n\nOK: No outliers detected.\n- Based on the following method and threshold: cook (0.808).\n- For variable: (Whole model)\n\n\nCode\nplot(res_outliers)\n\n\n\n\n\n\n\n\n\n\n\n9.4.5 Heteroscedasticity\n\n\nCode\nres_het &lt;- check_heteroscedasticity(model)\n\nres_het\n\n\nOK: Error variance appears to be homoscedastic (p = 0.053).\n\n\nCode\nplot(res_het)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Reporting</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html",
    "href": "chapters/visualization.html",
    "title": "10  Visualization",
    "section": "",
    "text": "11 Dependencies\nCode\nlibrary(readr)\nlibrary(ggplot2)\n# install.packages(\"datasauRus\")\nlibrary(datasauRus) \nlibrary(scales)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(plotrix) \n\n# install.packages(\"devtools\")\n# devtools::install_github(\"matthewbjane/ThemePark\")\nlibrary(ThemePark)\nlibrary(patchwork)\nlibrary(janitor)\nlibrary(knitr)\nlibrary(kableExtra)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#simple-plot-for-self-reports",
    "href": "chapters/visualization.html#simple-plot-for-self-reports",
    "title": "10  Visualization",
    "section": "14.1 Simple plot for self-reports",
    "text": "14.1 Simple plot for self-reports\n\n\nCode\nggplot(data = data_after_exclusions,\n       aes(x = mean_self_report)) +\n  geom_histogram(binwidth = 1)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#slightly-better-plot-for-self-reports",
    "href": "chapters/visualization.html#slightly-better-plot-for-self-reports",
    "title": "10  Visualization",
    "section": "14.2 Slightly better plot for self-reports",
    "text": "14.2 Slightly better plot for self-reports\n\n\nCode\nggplot(data = data_after_exclusions,\n       aes(x = mean_self_report)) +\n  # more intelligent choices for the binwidth and boundary\n  geom_histogram(binwidth = 1, boundary = 0.5) +\n  # labeling of the axis points\n  scale_x_continuous(breaks = scales::breaks_pretty(n = 7),\n                     limits = c(0.5, 7.5)) +\n  scale_y_continuous(breaks = seq(0, 60, 10)) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#exercise-plot-for-gender",
    "href": "chapters/visualization.html#exercise-plot-for-gender",
    "title": "10  Visualization",
    "section": "14.3 Exercise: Plot for gender",
    "text": "14.3 Exercise: Plot for gender\nCreate a similar plot for the gender variable in data_processed (ie before exclusions).",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#exercise-plot-for-amp",
    "href": "chapters/visualization.html#exercise-plot-for-amp",
    "title": "10  Visualization",
    "section": "14.4 Exercise: Plot for AMP",
    "text": "14.4 Exercise: Plot for AMP\nCreate a similar plot for the AMP scores in data_after_exclusions.\n\n\nCode\nmean_amp &lt;- data_after_exclusions |&gt;\n  summarize(mean_amp = mean(amp_score)) |&gt;\n  pull(mean_amp)\n\n\nplot_amp &lt;- \n  ggplot(data = data_after_exclusions,\n         aes(x = amp_score)) +\n  geom_histogram(binwidth = 0.1) +\n  scale_x_continuous(breaks = seq(0, 1, .10),\n                     name = \"AMP score\") +\n  scale_y_continuous(breaks = seq(0, 40, 5),\n                     name = \"Frequency\") +\n  geom_vline(xintercept = mean_amp, linetype = \"dotted\") +\n  theme_linedraw()\n\nplot_amp\n\n\n\n\n\n\n\n\n\nCode\nggsave(plot = plot_amp,\n       filename = \"plots/plot_amp.pdf\", \n       width = 6,\n       height = 5)\n\n\n\nExercise: How to add a dashed vertical line at the sample’s mean AMP score?",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#simple-plot-for-self-reports-1",
    "href": "chapters/visualization.html#simple-plot-for-self-reports-1",
    "title": "10  Visualization",
    "section": "15.1 Simple plot for self-reports",
    "text": "15.1 Simple plot for self-reports\n\n\nCode\nggplot(data = data_after_exclusions,\n       aes(x = mean_self_report)) +\n  geom_density(adjust = 1, # the degree of smoothing can be adjusted here \n               color = \"#FF69B4\",\n               fill = \"darkblue\", \n               alpha = 0.3) +\n  # labeling of the axis points\n  scale_x_continuous(breaks = scales::breaks_pretty(n = 7),\n                     limits = c(1, 7)) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#exercise-plot-for-amp-1",
    "href": "chapters/visualization.html#exercise-plot-for-amp-1",
    "title": "10  Visualization",
    "section": "15.2 Exercise: Plot for AMP",
    "text": "15.2 Exercise: Plot for AMP\nMake a similar density plot for the AMP.\n\nAdd a theme.\nMake the X axis breaks prettier.\nName both axis names more clearly.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#simple-plot-for-amp",
    "href": "chapters/visualization.html#simple-plot-for-amp",
    "title": "10  Visualization",
    "section": "16.1 Simple plot for AMP",
    "text": "16.1 Simple plot for AMP\n\n\nCode\n# create the summary values to be plotted\nsummary_amp &lt;- data_after_exclusions %&gt;%\n  group_by(gender) %&gt;%\n  summarize(amp_mean = mean(amp_score),\n            amp_se = plotrix::std.error(amp_score))\n\n# plot these values\nggplot(data = summary_amp, \n       aes(x = gender, \n           y = amp_mean)) +\n  geom_col() +\n  # geom_bar(stat = \"identity\") + # NB geom_col is equivalent to geom_bar when stat == \"identity\n  geom_linerange(aes(ymin = amp_mean - amp_se, \n                     ymax = amp_mean + amp_se))",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#slightly-better-plot-for-amp",
    "href": "chapters/visualization.html#slightly-better-plot-for-amp",
    "title": "10  Visualization",
    "section": "16.2 Slightly better plot for AMP",
    "text": "16.2 Slightly better plot for AMP\n\n\nCode\nggplot(data = summary_amp, \n       aes(x = gender, \n           y = amp_mean)) +\n  geom_col(fill = \"#0b6623\", # note that you can specify specific colors using hex codes or names\n           color = \"black\", \n           width = 0.6) +\n  geom_errorbar(aes(ymin = amp_mean - amp_se, \n                    ymax = amp_mean + amp_se), \n                width = 0.1, \n                color = \"black\") +\n  labs(title = \"Bar Plot of with Standard Errors\",\n       x = \"Gender\",\n       y = \"Mean AMP score\") +\n  theme_linedraw()",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#exercise-plot-for-self-reports",
    "href": "chapters/visualization.html#exercise-plot-for-self-reports",
    "title": "10  Visualization",
    "section": "16.3 Exercise: Plot for self-reports",
    "text": "16.3 Exercise: Plot for self-reports\nMake a similar plot for the self-reports.\n\nUse coord_flip() to swap the X and Y axes.\n\n\nExercise: How to capitalize ‘Male’ and ‘Female’ by wrangling the data before plotting?",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/visualization.html#exercise",
    "href": "chapters/visualization.html#exercise",
    "title": "10  Visualization",
    "section": "18.1 Exercise",
    "text": "18.1 Exercise\nCreate a plot that assesses the association between self report scores and AMP scores. By wrangling data_processed more prior to plotting, and using facet_grid(), compare a) men vs women and b) participants who are 30+ years old vs younger than 30.\nImprove the appearance of the plot, including its text, colors, theme, etc.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "chapters/license.html",
    "href": "chapters/license.html",
    "title": "11  License and citation",
    "section": "",
    "text": "© Ian Hussey (2025)\nText and figures are licensed under a Creative Commons Attribution 4.0 (CC BY 4.0) license.\nCode is licensed under the MIT License.\nYou are free to copy, share, adapt, and reuse the contents of this book — text, figures, and code — for any purpose, including commercial use, provided you cite it.\nCitation:\nHussey, I. (2025) Improving your statistical inferences using Monte Carlo simulation studies in tidyverse. github.com/ianhussey/improving-your-statistical-inferences-through-monte-carlo-simulation-studies",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>License and citation</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#rstudio-keyboard-shortcuts",
    "href": "chapters/fundamentals.html#rstudio-keyboard-shortcuts",
    "title": "3  Fundamentals",
    "section": "3.3 RStudio keyboard shortcuts",
    "text": "3.3 RStudio keyboard shortcuts\nOnce you have learned about some of the concepts mentioned below in later chapters, it can be useful to come back to these cheatsheets to learn the keyboard shortcuts for them.\n\n\n3.3.1 Particularly useful shortcuts\nWindows\n\nInsert Chunk: Ctrl + Alt + I\nInsert Pipe (|&gt;): shift + Ctrl + M\nMulti-line typing: Alt + Mouse click-and-highlight multiple lines, then type\nMove cursor by word instead of by character: Alt + arrows\nHighlight words: Shift + alt + arrows\nFix Indentation: Mouse click-and-highlight multiple lines + Ctrl + I\nComment out (#) multiple Lines: Mouse click-and-highlight multiple lines, then Shift + Ctrl + C\n\nMac\n\nInsert Chunk: Cmd + Alt + I\nInsert Pipe (|&gt;): shift + Cmd + M\nMulti-line typing: Alt + Mouse click-and-highlight multiple lines, then type\nMove cursor by word instead of by character: Option + arrows\nHighlight words: Shift + option + arrows\nFix Indentation: Mouse click-and-highlight multiple lines + Cmd + I\nComment out (#) multiple Lines: Mouse click-and-highlight multiple lines, then Shift + Cmd + C\n\nYou can also change or set up additional keyboard shortcuts in the “Tools&gt;Modify keyboard shortcuts” drop down menu. For example, I have modified the shortcut to switch between Source viewer vs. Visual viewer to be “Cmd + `”.\nOf the above, multi-line typing is the one that reliably gets an audiable ‘whoa’ from audiences. It’s easier to see than explain:\n\nWhen you get a bit more experienced with RStudio, I highly recommend you check out this blog post on shortcuts to know about more advanced features such as Function/Variable Extraction, Renaming in Scope, Code Snippets, and advanced search and find-and-replace.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/how_to_use_this_book.html",
    "href": "chapters/how_to_use_this_book.html",
    "title": "1  How to use this book",
    "section": "",
    "text": "1.1 Other learning resources",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to use this book</span>"
    ]
  },
  {
    "objectID": "chapters/how_to_use_this_book.html#other-learning-resources",
    "href": "chapters/how_to_use_this_book.html#other-learning-resources",
    "title": "1  How to use this book",
    "section": "",
    "text": "You can find cheatsheets in the /resources folder [add link]\nThe Open Source textbook Data Skills for Reproducible Research (DeBruine et al.) is very good, e.g., its sections on dplyr and tidyr.\nAllison Horst’s interactive web app to learn dplyr is great: https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome.\nThe Open Source textbook R for Data Science (aka, Wickham’s R4DS) is also very good, if a little dryer. Hadley Wickham is the main developer of the “tidyverse” set of packages, including dplyr, tidyr, ggplot2, stringr, lubridate, and others. See its section on data transformation.\n\nThe entire second edition of the book is available at https://r4ds.hadley.nz/.\n\nGarrick Aden-Buie’s tidyexplain is great for understanding how tidyr’s pivot functions work: https://github.com/gadenbuie/tidyexplain\ndatasciencebox.org has good interactive tutorials, but they are more useful for practicing processing and visualization skills once you’ve already learned the functions\n\nggplot2 https://minecr.shinyapps.io/dsbox-01-edibnb/\nggplot2, pipe, mutate https://minecr.shinyapps.io/dsbox-02-accidents\nggplot2, pipe, select, arrange, summarize, count, filter https://minecr.shinyapps.io/dsbox-03-collegemajors\ncount, arrange, summarize https://minecr.shinyapps.io/dsbox-04-legosales/\n\nIf you’d like video content, datasciencebox.org also has it: https://datasciencebox.org/02-exploring-data",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to use this book</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#whats-the-difference-between-base-r-rstudio-ide-and-tidyverse",
    "href": "chapters/fundamentals.html#whats-the-difference-between-base-r-rstudio-ide-and-tidyverse",
    "title": "3  Fundamentals",
    "section": "",
    "text": "Base R is the coding language that we learn in this course.\nRStudio IDE (Integrated Development Environment) is the application we use to write R code in. There are others but RStudio is the best option, although this could change in future.\n{tidyverse} is a set of R packages that enhance base R’s utility and usability, built around the concept of Tidy Data. We’ll learn about Tidy Data in another chapter. {tidyverse} arguably changes how we write R code so fundamentally that some people argue that R+{tidyverse} should be conceptualized as a meaningfully different language with different conventions and workflows.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/fundamentals.html#rstudio-ide-basics",
    "href": "chapters/fundamentals.html#rstudio-ide-basics",
    "title": "3  Fundamentals",
    "section": "3.2 RStudio IDE basics",
    "text": "3.2 RStudio IDE basics\nGet familiar with the different parts of the RStudio IDE user interface with this cheatsheet, which you can also download as a pdf here.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "chapters/setup.html",
    "href": "chapters/setup.html",
    "title": "1  Installation and setup",
    "section": "",
    "text": "1.1 Install the base R language and the RStudio IDE\nYou should install the base R language and the RStudio IDE from here.\nThere are detailed steps available for Windows and Mac here.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "chapters/setup.html#rstudio-settings-and-options",
    "href": "chapters/setup.html#rstudio-settings-and-options",
    "title": "1  Installation and setup",
    "section": "1.2 RStudio settings and options",
    "text": "1.2 RStudio settings and options\n\n1.2.1 Important settings to change for reproducibility\nFor reproducibility, please ensure RStudio’s settings never save the objects in your environment to disk on exist or load them again when opening RStudio. Open the Tools&gt;Global Options menu, go to General, and untick the following box and set save to ‘Never’. \n\n\n1.2.2 RStudio themes\nRStudio can be skinned with different themes, including dark themes that may be easier on your eyes or are, at least, objectively cooler.\nThe objectively coolest theme of them all is Synthwave85, which can be installed by running the following line of code in RStudio’s console: rstudioapi::addTheme(\"https://raw.githubusercontent.com/jnolis/synthwave85/master/Synthwave85.rstheme\", TRUE, TRUE, FALSE)\nTo change themes, click the ‘Tools’ drop down menu, then ‘Global Options’, then ‘Appearance’, then ‘RStudio Theme’.\n\n\n\n1.2.3 RStudio fonts\nCertain monospaced fonts provide the advantage of rendering common R characters or functions more nicely.\nThis is the same code displayed using Monaco, a built-in font:\n\nAnd using JetBrainsMono, which supports rendering the base-R pipe (|&gt;) and non-equivalence symbols as single characters\n\nIf you prefer the latter, you can download JetBrainsMono from here and install on your computer. Restart RStudio, then change the font by clicking the ‘Tools’ drop down menu, then ‘Global Options’, then ‘Appearance’, then ‘Editor font’.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "chapters/setup.html#install-slack-and-github",
    "href": "chapters/setup.html#install-slack-and-github",
    "title": "1  Installation and setup",
    "section": "1.3 Install Slack and GitHub",
    "text": "1.3 Install Slack and GitHub\nIf you are reading this book as part of a course with me at the University of Bern, please:\n\nInstall the Slack app. You can download it for Windows here or for Mac here.\nI will send an invitation to the course’s Slack workspace to all students enrolled in the course. Please check your @students.unibe.ch email address.\nInstall the GitHub desktop app. You can download here.\nMake an account yourself on https://github.com and log into it on the GitHub desktop app. University of Bern does provide you access to a branded GitHub account, but you’ll lose access to it after you finish your studies, so it’s better to make your own private account.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation and setup</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Data Processing and Visualization",
    "section": "",
    "text": "About this book\nThis Open Source eBook provides materials for the course “Reproducible Data Processing and Visualization in R” that I deliver at the University of Bern’s Institute of Psychology.",
    "crumbs": [
      "About this book"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "Reproducible Data Processing and Visualization",
    "section": "How to use this book",
    "text": "How to use this book\n\nYou can find cheatsheets in the /resources folder [add link]",
    "crumbs": [
      "About this book"
    ]
  },
  {
    "objectID": "index.html#other-learning-resources",
    "href": "index.html#other-learning-resources",
    "title": "Reproducible Data Processing and Visualization",
    "section": "Other learning resources",
    "text": "Other learning resources\nThere are many excellent Open Source resources to learn R and {tidyverse} for data processing and visualization. Readers are encouraged to seek them out to support the materials already provided in this book. I can particularly recommend the following ones:\n\nLisa DeBruine et al.’s (2021) Open Source textbook Data Skills for Reproducible Research\n\nSection on {dplyr}\nSection on {tidyr}\n\nAllison Horst’s interactive web app for learning {dplyr}\nHadley Wickham’s R For Data Science, aka R4DS)\n\nSection on data transformation\n\nGarrick Aden-Buie’s tidyexplain gifs for understanding how {tidyr}’s pivot functions work\ndatasciencebox.org\n\nInteractive tutorials that very useful for practicing processing and visualization skills once you’ve already learned the functions (i.e., don’t start here)\n\nPractice the functions ggplot\nPractice the functions ggplot, pipe, mutate\nPractice the functions ggplot, pipe, select, arrange, summarize, count, filter\nPractice the functions count, arrange, summarize\n\nRecorded presentations on many relevant topics",
    "crumbs": [
      "About this book"
    ]
  }
]